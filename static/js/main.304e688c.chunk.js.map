{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","loginTC","createAsyncThunk","a","responce","resultCode","setIsLoggedInAC","isLogin","response","slice","createSlice","name","initialState","isLoggedIn","reducers","state","action","payload","actions","authReducer","reducer","isInitialized","setAppInitializedAC","appReducer","removeTodolistAC","index","findIndex","el","splice","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","changeTodolistEntityStatusAC","setTodolistsAC","todolists","map","tl","todolistsReducer","console","log","type","fetchTasksTC","res","tasks","items","removeTaskTC","then","addTaskTC","task","item","catch","addTaskAC","todoListId","updateTaskAC","extraReducers","builder","addCase","forEach","fulfilled","tasksReducer","updateTaskTC","domainModel","getState","find","t","apiModel","deadline","description","priority","startDate","warn","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","key","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","useSelector","auth","changeStatus","newTitle","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","errors","FormControlLabel","control","App","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","top","textAlign","width","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.304e688c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\n\nconst settings = {\n  withCredentials: true,\n  headers: {\n    'API-KEY': '6d28cae1-0bac-4f22-abce-7f5967410738'\n  }\n}\nconst instance = axios.create({\n  baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n  ...settings\n})\n\n// api\nexport const todolistsAPI = {\n    getTodolists() {\n        const promise = instance.get<TodolistType[]>('todo-lists');\n        return promise;\n    },\n    createTodolist(title: string) {\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\n        return promise;\n    },\n    deleteTodolist(id: string) {\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\n        return promise;\n    },\n    updateTodolist(id: string, title: string) {\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\n        return promise;\n    },\n    getTasks(todolistId: string) {\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\n    },\n    deleteTask(todolistId: string, taskId: string) {\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\n    },\n    createTask(todolistId: string, taskTitile: string) {\n        return instance.post<ResponseType<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\n    },\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\n    }\n}\n\n\nexport type LoginParamsType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha?: string\n}\n\nexport const authAPI = {\n    login(data: LoginParamsType) {\n        const promise = instance.post<ResponseType<{userId?: number}>>('auth/login', data);\n        return promise;\n    },\n    logout() {\n        const promise = instance.delete<ResponseType<{userId?: number}>>('auth/login');\n        return promise;\n    },\n    me() {\n       const promise =  instance.get<ResponseType<{id: number; email: string; login: string}>>('auth/me');\n       return promise\n    }\n}\n\n// types\nexport type TodolistType = {\n    id: string\n    title: string\n    addedDate: string\n    order: number\n}\nexport type ResponseType<D = {}> = {\n    resultCode: number\n    messages: Array<string>\n    data: D\n}\nexport enum TaskStatuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3\n}\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n}\nexport type TaskType = {\n    description: string\n    title: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n}\nexport type UpdateTaskModelType = {\n    title: string\n    description: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n}\ntype GetTasksResponse = {\n    error: string | null\n    totalCount: number\n    items: TaskType[]\n}\n","import {\n  setAppErrorAC,\n  SetAppErrorActionType,\n  setAppStatusAC,\n  SetAppStatusActionType\n} from '../app/app-reducer'\nimport {ResponseType} from '../api/todolists-api'\nimport {Dispatch} from 'redux'\n\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\n  if (data.messages.length) {\n    dispatch(setAppErrorAC({error: data.messages[0]}))\n  } else {\n    dispatch(setAppErrorAC({error: 'Some error occurred'}))\n  }\n  dispatch(setAppStatusAC({status: 'failed'}))\n}\n\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\n  dispatch(setAppErrorAC({error: error.message ? error.message : 'Some error occurred'}))\n  dispatch(setAppStatusAC({status: 'failed'}))\n}\n","import {Dispatch} from 'redux'\r\nimport {setAppStatusAC} from 'app/app-reducer'\r\nimport {authAPI, LoginParamsType} from 'api/todolists-api'\r\nimport {\r\n  handleServerAppError,\r\n  handleServerNetworkError\r\n} from 'utils/error-utils'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {AxiosError} from \"axios\";\r\n\r\n\r\nexport const loginTC = createAsyncThunk('auth/loginTC', async (data: LoginParamsType, {dispatch}) => {\r\n  dispatch(setAppStatusAC({status: 'loading'}))\r\n\r\n  try {\r\n    let responce = await authAPI.login(data)\r\n    if (responce.data.resultCode === 0) {\r\n      dispatch(setAppStatusAC({status: 'succeeded'}))\r\n      dispatch(setIsLoggedInAC({isLogin: true}))\r\n    } else {\r\n      handleServerAppError(responce.data, dispatch)\r\n    }\r\n  } catch (error) {\r\n    const {response, message} = error as AxiosError;\r\n    handleServerNetworkError({message}, dispatch)\r\n  }\r\n})\r\n\r\n// export const loginTC_ = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n//   dispatch(setAppStatusAC({status: 'loading'}))\r\n//   authAPI.login(data)\r\n//     .then(res => {\r\n//       if (res.data.resultCode === 0) {\r\n//         dispatch(setIsLoggedInAC({isLogin: true}))\r\n//         dispatch(setAppStatusAC({status: 'succeeded'}))\r\n//       } else {\r\n//         handleServerAppError(res.data, dispatch)\r\n//       }\r\n//     })\r\n//     .catch((error) => {\r\n//       handleServerNetworkError(error, dispatch)\r\n//     })\r\n// }\r\n\r\nconst slice = createSlice({\r\n  name: 'auth', // на основании этого имени будут генерироваться типы actions\r\n  initialState: {\r\n    isLoggedIn: false\r\n  },\r\n  reducers: {\r\n    setIsLoggedInAC(state, action: PayloadAction<{ isLogin: boolean }>) {\r\n      state.isLoggedIn = action.payload.isLogin  // innerJs позволяет менять стейт буд-то мутируя его, остальное она сама сделает\r\n    }\r\n  }\r\n})\r\n\r\nexport const {setIsLoggedInAC} = slice.actions\r\n\r\nexport const authReducer = slice.reducer\r\n\r\n// thunks\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n  dispatch(setAppStatusAC({status: 'loading'}))\r\n  authAPI.logout()\r\n    .then(res => {\r\n      if (res.data.resultCode === 0) {\r\n        dispatch(setIsLoggedInAC({isLogin: false}))\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n      } else {\r\n        handleServerAppError(res.data, dispatch)\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\n// types\r\n\r\n// type ActionsType = ReturnType<typeof setIsLoggedInAC>\r\n// type InitialStateType = {\r\n//   isLoggedIn: boolean\r\n// }\r\n\r\n// type ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import {Dispatch} from 'redux'\nimport {authAPI} from '../api/todolists-api'\nimport {setIsLoggedInAC} from '../features/Login/auth-reducer'\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\nconst initialState: InitialStateType = {\n  status: 'idle',\n  error: null,\n  isInitialized: false\n}\n\nconst slice = createSlice({\n  name: 'app',\n  initialState,\n  reducers: {\n    setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\n      state.status = action.payload.status\n    },\n    setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\n      state.error = action.payload.error\n    },\n    setAppInitializedAC(state, action: PayloadAction<{ isInitialized: boolean }>) {\n      state.isInitialized = action.payload.isInitialized\n    }\n  }\n})\n\nexport const {setAppErrorAC, setAppInitializedAC, setAppStatusAC} = slice.actions\n\nexport const appReducer = slice.reducer\n// export const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n//   switch (action.type) {\n//     case 'APP/SET-STATUS':\n//       return {...state, status: action.status}\n//     case 'APP/SET-ERROR':\n//       return {...state, error: action.error}\n//     case 'APP/SET-IS-INITIALIED':\n//       return {...state, isInitialized: action.value}\n//     default:\n//       return {...state}\n//   }\n// }\n\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\nexport type InitialStateType = {\n  // происходит ли сейчас взаимодействие с сервером\n  status: RequestStatusType\n  // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\n  error: string | null\n  // true когда приложение проинициализировалось (проверили юзера, настройки получили и т.д.)\n  isInitialized: boolean\n}\n\n// export const setAppErrorAC = (error: string | null) => ({\n//   type: 'APP/SET-ERROR',\n//   error\n// } as const)\n// export const setAppStatusAC = (status: RequestStatusType) => ({\n//   type: 'APP/SET-STATUS',\n//   status\n// } as const)\n// export const setAppInitializedAC = (value: boolean) => ({\n//   type: 'APP/SET-IS-INITIALIED',\n//   value\n// } as const)\n\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\n  authAPI.me().then(res => {\n    if (res.data.resultCode === 0) {\n      dispatch(setIsLoggedInAC({isLogin: true}));\n    } else {\n\n    }\n    dispatch(setAppInitializedAC({isInitialized: true}));\n  })\n}\n\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\n\n//\n// type ActionsType =\n//   | SetAppErrorActionType\n//   | SetAppStatusActionType\n//   | ReturnType<typeof setAppInitializedAC>\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\nimport {Dispatch} from 'redux'\nimport {\n  RequestStatusType,\n  SetAppErrorActionType,\n  setAppStatusAC,\n  SetAppStatusActionType\n} from '../../app/app-reducer'\nimport {handleServerNetworkError} from '../../utils/error-utils'\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\nconst initialState: TodolistDomainType[] = []\n\n\nconst slice = createSlice({\n  name: 'todolists',\n  initialState: initialState,\n  reducers: {\n    removeTodolistAC(state: TodolistDomainType[], action: PayloadAction<{ id: string }>) {\n      const index = state.findIndex(el => el.id === action.payload.id)\n      if (index > -1) {\n        state.splice(index, 1)\n      }\n    },\n    addTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>) {\n      state.unshift({\n        ...action.payload.todolist, filter: 'all', entityStatus: 'idle'\n      })\n    },\n    changeTodolistTitleAC(state, action: PayloadAction<{ id: string, title: string }>) {\n      let {id, title} = action.payload\n      const index = state.findIndex(el => el.id === id)\n      if (index > -1) {\n        state[index].title = title\n      }\n    },\n    changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\n      let {id, filter} = action.payload\n      const index = state.findIndex(el => el.id === id)\n      if (index > -1) {\n        state[index].filter = filter\n      }\n    },\n    changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\n      let {id, status} = action.payload\n      const index = state.findIndex(el => el.id === id)\n      if (index > -1) {\n        state[index].entityStatus = status\n      }\n    },\n    setTodolistsAC(state, action: PayloadAction<{ todolists: TodolistType[] }>) {\n      let {todolists} = action.payload\n      return todolists.map(tl => ({\n        ...tl,\n        filter: 'all',\n        entityStatus: 'idle'\n      }))\n    },\n  }\n})\nexport const todolistsReducer = slice.reducer\n\nexport const {\n  changeTodolistFilterAC,\n  changeTodolistTitleAC,\n  changeTodolistEntityStatusAC,\n  removeTodolistAC,\n  setTodolistsAC,\n  addTodolistAC\n} = slice.actions\n\nconsole.log(changeTodolistFilterAC.type);\n\n// export const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\n//   switch (action.type) {\n//     case 'REMOVE-TODOLIST':\n//       return state.filter(tl => tl.id !== action.id)\n//     case 'ADD-TODOLIST':\n//       return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\n//     case 'CHANGE-TODOLIST-TITLE':\n//       return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\n//     case 'CHANGE-TODOLIST-FILTER':\n//       return state.map(tl => tl.id === action.id ? {\n//         ...tl,\n//         filter: action.filter\n//       } : tl)\n//     case 'CHANGE-TODOLIST-ENTITY-STATUS':\n//       return state.map(tl => tl.id === action.id ? {\n//         ...tl,\n//         entityStatus: action.status\n//       } : tl)\n//     case 'SET-TODOLISTS':\n//       return action.todolists.map(tl => ({\n//         ...tl,\n//         filter: 'all',\n//         entityStatus: 'idle'\n//       }))\n//     default:\n//       return state\n//   }\n// }\n\n// actions\n// export const removeTodolistAC = (id: string) => ({\n//   type: 'REMOVE-TODOLIST',\n//   id\n// } as const)\n// export const addTodolistAC = (todolist: TodolistType) => ({\n//   type: 'ADD-TODOLIST',\n//   todolist\n// } as const)\n// export const changeTodolistTitleAC = (id: string, title: string) => ({\n//   type: 'CHANGE-TODOLIST-TITLE',\n//   id,\n//   title\n// } as const)\n// export const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\n//   type: 'CHANGE-TODOLIST-FILTER',\n//   id,\n//   filter\n// } as const)\n// export const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\n//   type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status\n// } as const)\n// export const setTodolistsAC = (todolists: Array<TodolistType>) => ({\n//   type: 'SET-TODOLISTS',\n//   todolists\n// } as const)\n\n// thunks\nexport const fetchTodolistsTC = () => {\n  return (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC({status: 'loading'}))\n    todolistsAPI.getTodolists()\n      .then((res) => {\n        dispatch(setTodolistsAC({todolists: res.data}))\n        dispatch(setAppStatusAC({status: 'succeeded'}))\n      })\n      .catch(error => {\n        handleServerNetworkError(error, dispatch);\n      })\n  }\n}\nexport const removeTodolistTC = (todolistId: string) => {\n  return (dispatch: Dispatch) => {\n    //изменим глобальный статус приложения, чтобы вверху полоса побежала\n    dispatch(setAppStatusAC({status: 'loading'}))\n    //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\n    dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\n    todolistsAPI.deleteTodolist(todolistId)\n      .then((res) => {\n        dispatch(removeTodolistAC({id: todolistId}))\n        //скажем глобально приложению, что асинхронная операция завершена\n        dispatch(setAppStatusAC({status: 'succeeded'}))\n      })\n  }\n}\nexport const addTodolistTC = (title: string) => {\n  return (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC({status: 'loading'}))\n    todolistsAPI.createTodolist(title)\n      .then((res) => {\n        dispatch(addTodolistAC({todolist: res.data.data.item}))\n        dispatch(setAppStatusAC({status: 'succeeded'}))\n      })\n  }\n}\nexport const changeTodolistTitleTC = (id: string, title: string) => {\n  return (dispatch: Dispatch<ActionsType>) => {\n    todolistsAPI.updateTodolist(id, title)\n      .then((res) => {\n        dispatch(changeTodolistTitleAC({id, title}))\n      })\n  }\n}\n\n// types\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\ntype ActionsType =\n  | RemoveTodolistActionType\n  | AddTodolistActionType\n  | ReturnType<typeof changeTodolistTitleAC>\n  | ReturnType<typeof changeTodolistFilterAC>\n  | SetTodolistsActionType\n  | ReturnType<typeof changeTodolistEntityStatusAC>\nexport type FilterValuesType = 'all' | 'active' | 'completed';\nexport type TodolistDomainType = TodolistType & {\n  filter: FilterValuesType\n  entityStatus: RequestStatusType\n}\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\n\n\n\n\n\n","import {addTodolistAC, removeTodolistAC, setTodolistsAC} from './todolists-reducer'\r\nimport {\r\n  TaskPriorities,\r\n  TaskStatuses,\r\n  TaskType,\r\n  todolistsAPI,\r\n  UpdateTaskModelType\r\n} from 'api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from 'app/store'\r\nimport {setAppStatusAC} from 'app/app-reducer'\r\nimport {\r\n  handleServerAppError,\r\n  handleServerNetworkError\r\n} from 'utils/error-utils'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\n// при вызове вызывается payloadCreator, в него мы должны передать только один параметр, если их много значит объект.\r\n// второй аргумент это thunkAPI, в нём полезные штуки (dispatch ... )\r\n// внутри ещё и actions создаются\r\nexport const fetchTasksTC = createAsyncThunk('task/fetchTasksTC', async (todolistId: string, {dispatch}) => {\r\n  dispatch(setAppStatusAC({status: 'loading'}))\r\n  let res = await todolistsAPI.getTasks(todolistId)\r\n  const tasks = res.data.items\r\n  dispatch(setAppStatusAC({status: 'succeeded'}))\r\n  return {tasks, todolistId} // эти данные используются в builder.addCase(fetchTasksTC.fulfilled,\r\n})\r\n\r\ntype RemoveTaskPayload = {\r\n  todolistId: string\r\n  taskId: string\r\n}\r\nexport const removeTaskTC = createAsyncThunk('task/removeTaskTC', (payload: RemoveTaskPayload, {dispatch}) => {\r\n  let {taskId, todolistId} = payload\r\n  return todolistsAPI.deleteTask(todolistId, taskId)\r\n    .then((res) => {\r\n      return {taskId, todolistId}\r\n    })\r\n})\r\n\r\ntype AddTaskPayload = {\r\n  todolistId: string\r\n  title: string\r\n}\r\n\r\nexport const addTaskTC = createAsyncThunk('task/addTaskTC', (payload: AddTaskPayload, {dispatch}) => {\r\n  let {todolistId, title} = payload\r\n  dispatch(setAppStatusAC({status: 'loading'}))\r\n  return todolistsAPI.createTask(todolistId, title)\r\n    .then(res => {\r\n      if (res.data.resultCode === 0) {\r\n        const task = res.data.data.item\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return {task}\r\n      } else {\r\n        handleServerAppError(res.data, dispatch);\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      handleServerNetworkError(error, dispatch)\r\n    })\r\n})\r\n\r\nconst slice = createSlice({\r\n  name: 'task',\r\n  initialState,\r\n  reducers: {\r\n    addTaskAC(state, action: PayloadAction<{ task: TaskType }>) {\r\n      let {task} = action.payload\r\n      state[task.todoListId].unshift(task)\r\n    },\r\n    updateTaskAC(state, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todolistId: string }>) {\r\n      let {taskId, todolistId, model} = action.payload\r\n      const tasks = state[todolistId]\r\n      const index = tasks.findIndex(el => el.id === taskId)\r\n      if (index > -1) {\r\n        tasks[index] = {...tasks[index], ...model}\r\n      }\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(addTodolistAC, (state, action) => {\r\n      state[action.payload.todolist.id] = []\r\n    })\r\n    builder.addCase(setTodolistsAC, (state, action) => {\r\n      action.payload.todolists.forEach(tl => {\r\n        state[tl.id] = []\r\n      })\r\n    })\r\n    builder.addCase(removeTodolistAC, (state, action) => {\r\n      delete state[action.payload.id]\r\n    })\r\n    builder.addCase(fetchTasksTC.fulfilled, (state, action) => {\r\n      //fetchTasksTC.fulfilled наш новый AC, вызывается автоматом\r\n      let {tasks, todolistId} = action.payload\r\n      state[todolistId] = tasks\r\n    })\r\n    builder.addCase(removeTaskTC.fulfilled, (state, action) => {\r\n      //fetchTasksTC.fulfilled наш новый AC, вызывается автоматом\r\n      let {taskId, todolistId} = action.payload\r\n      const index = state[todolistId].findIndex(el => el.id === taskId)\r\n      if (index > -1) {\r\n        state[todolistId].splice(index, 1)\r\n      }\r\n    })\r\n    // builder.addCase(addTaskTC.fulfilled, (state, action) => {\r\n    //   let {task} = action.payload\r\n    //   state[task.todoListId].unshift(task)\r\n    // })\r\n  }\r\n})\r\n\r\nexport const {updateTaskAC, addTaskAC} = slice.actions\r\nexport const tasksReducer = slice.reducer\r\n\r\n\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n  (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    const state = getState()\r\n    const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n    if (!task) {\r\n      //throw new Error(\"task not found in the state\");\r\n      console.warn('task not found in the state')\r\n      return\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n      deadline: task.deadline,\r\n      description: task.description,\r\n      priority: task.priority,\r\n      startDate: task.startDate,\r\n      title: task.title,\r\n      status: task.status,\r\n      ...domainModel\r\n    }\r\n\r\n    todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n      .then(res => {\r\n        if (res.data.resultCode === 0) {\r\n          const action = updateTaskAC({taskId, model: domainModel, todolistId})\r\n          dispatch(action)\r\n        } else {\r\n          handleServerAppError(res.data, dispatch);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        handleServerNetworkError(error, dispatch);\r\n      })\r\n  }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n  title?: string\r\n  description?: string\r\n  status?: TaskStatuses\r\n  priority?: TaskPriorities\r\n  startDate?: string\r\n  deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n  [key: string]: Array<TaskType>\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\nimport {AddBox} from '@material-ui/icons';\n\ntype AddItemFormPropsType = {\n    addItem: (title: string) => void\n    disabled?: boolean\n}\n\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\n    console.log(\"AddItemForm called\")\n\n    let [title, setTitle] = useState(\"\")\n    let [error, setError] = useState<string | null>(null)\n\n    const addItemHandler = () => {\n        if (title.trim() !== \"\") {\n            addItem(title);\n            setTitle(\"\");\n        } else {\n            setError(\"Title is required\");\n        }\n    }\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (error !== null) {\n            setError(null);\n        }\n        if (e.charCode === 13) {\n            addItemHandler();\n        }\n    }\n\n    return <div>\n        <TextField variant=\"outlined\"\n                   disabled={disabled}\n                   error={!!error}\n                   value={title}\n                   onChange={onChangeHandler}\n                   onKeyPress={onKeyPressHandler}\n                   label=\"Title\"\n                   helperText={error}\n        />\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\n            <AddBox />\n        </IconButton>\n    </div>\n})\n","import React, {ChangeEvent, useState} from 'react';\nimport {TextField} from '@material-ui/core';\n\ntype EditableSpanPropsType = {\n  value: string\n  onChange: (newValue: string) => void\n}\n\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\n  console.log(\"EditableSpan called\");\n  let [editMode, setEditMode] = useState(false);\n  let [title, setTitle] = useState(props.value);\n\n  const activateEditMode = () => {\n    setEditMode(true);\n    setTitle(props.value);\n  }\n  const activateViewMode = () => {\n    setEditMode(false);\n    props.onChange(title);\n  }\n  const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.currentTarget.value)\n  }\n\n  return editMode\n    ? <TextField value={title} onChange={changeTitle} autoFocus\n                 onBlur={activateViewMode}/>\n    : <span onDoubleClick={activateEditMode}>{props.value}</span>\n});\n","import React, {ChangeEvent, useCallback} from 'react'\nimport {Checkbox, IconButton} from '@material-ui/core'\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\nimport {Delete} from '@material-ui/icons'\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\n\ntype TaskPropsType = {\n  task: TaskType\n  todolistId: string\n  changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\n  changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\n  removeTask: (taskId: string, todolistId: string) => void\n}\nexport const Task = React.memo((props: TaskPropsType) => {\n  const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\n\n  const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    let newIsDoneValue = e.currentTarget.checked\n    props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\n  }, [props.task.id, props.todolistId]);\n\n  const onTitleChangeHandler = useCallback((newValue: string) => {\n    props.changeTaskTitle(props.task.id, newValue, props.todolistId)\n  }, [props.task.id, props.todolistId]);\n\n  return <div key={props.task.id}\n              className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\n    <Checkbox\n      checked={props.task.status === TaskStatuses.Completed}\n      color=\"primary\"\n      onChange={onChangeHandler}\n    />\n\n    <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\n    <IconButton onClick={onClickHandler}>\n      <Delete/>\n    </IconButton>\n  </div>\n})\n","import React, {useCallback, useEffect} from 'react'\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\nimport {Button, IconButton} from '@material-ui/core'\nimport {Delete} from '@material-ui/icons'\nimport {Task} from './Task/Task'\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\nimport {useDispatch} from 'react-redux'\nimport {fetchTasksTC} from '../tasks-reducer'\n\ntype PropsType = {\n  todolist: TodolistDomainType\n  tasks: Array<TaskType>\n  changeFilter: (value: FilterValuesType, todolistId: string) => void\n  addTask: (title: string, todolistId: string) => void\n  changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\n  changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\n  removeTask: (taskId: string, todolistId: string) => void\n  removeTodolist: (id: string) => void\n  changeTodolistTitle: (id: string, newTitle: string) => void\n  demo?: boolean\n}\n\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\n  console.log('Todolist called')\n\n  const dispatch = useDispatch()\n  useEffect(() => {\n    if (demo) {\n      return\n    }\n    const thunk = fetchTasksTC(props.todolist.id)\n    dispatch(thunk)\n  }, [demo, dispatch, props.todolist.id])\n\n  const addTask = useCallback((title: string) => {\n    props.addTask(title, props.todolist.id)\n  }, [props])\n\n  const removeTodolist = () => {\n    props.removeTodolist(props.todolist.id)\n  }\n  const changeTodolistTitle = useCallback((title: string) => {\n    props.changeTodolistTitle(props.todolist.id, title)\n  }, [props])\n\n  const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props])\n  const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props])\n  const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props])\n\n\n  let tasksForTodolist = props.tasks\n\n  if (props.todolist.filter === 'active') {\n    tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\n  }\n  if (props.todolist.filter === 'completed') {\n    tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\n  }\n\n  return <div>\n    <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\n      <IconButton onClick={removeTodolist}\n                  disabled={props.todolist.entityStatus === 'loading'}>\n        <Delete/>\n      </IconButton>\n    </h3>\n    <AddItemForm addItem={addTask}\n                 disabled={props.todolist.entityStatus === 'loading'}/>\n    <div>\n      {\n        tasksForTodolist.map(t => <Task key={t.id} task={t}\n                                        todolistId={props.todolist.id}\n                                        removeTask={props.removeTask}\n                                        changeTaskTitle={props.changeTaskTitle}\n                                        changeTaskStatus={props.changeTaskStatus}\n        />)\n      }\n    </div>\n    <div style={{paddingTop: '10px'}}>\n      <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\n              onClick={onAllClickHandler}\n              color={'default'}\n      >All\n      </Button>\n      <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\n              onClick={onActiveClickHandler}\n              color={'primary'}>Active\n      </Button>\n      <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\n              onClick={onCompletedClickHandler}\n              color={'secondary'}>Completed\n      </Button>\n    </div>\n  </div>\n})\n\n\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n  addTodolistTC,\r\n  changeTodolistFilterAC,\r\n  changeTodolistTitleTC,\r\n  fetchTodolistsTC,\r\n  FilterValuesType,\r\n  removeTodolistTC,\r\n  TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from 'react-router-dom'\r\n\r\ntype PropsType = {\r\n  demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n  const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n  const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    if (demo || !isLoggedIn) {\r\n      return;\r\n    }\r\n    const thunk = fetchTodolistsTC()\r\n    dispatch(thunk)\r\n  }, [dispatch, demo, isLoggedIn])\r\n\r\n  const removeTask = useCallback(function (id: string, todolistId: string) {\r\n    const thunk = removeTaskTC({todolistId, taskId: id })\r\n    dispatch(thunk)\r\n  }, [dispatch])\r\n\r\n  const addTask = useCallback(function (title: string, todolistId: string) {\r\n    const thunk = addTaskTC({title, todolistId})\r\n    dispatch(thunk)\r\n  }, [dispatch])\r\n\r\n  const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n    const thunk = updateTaskTC(id, {status}, todolistId)\r\n    dispatch(thunk)\r\n  }, [dispatch])\r\n\r\n  const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n    const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n    dispatch(thunk)\r\n  }, [dispatch])\r\n\r\n  const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n    const action = changeTodolistFilterAC({id: todolistId, filter: value})\r\n    dispatch(action)\r\n  }, [dispatch])\r\n\r\n  const removeTodolist = useCallback(function (id: string) {\r\n    const thunk = removeTodolistTC(id)\r\n    dispatch(thunk)\r\n  }, [dispatch])\r\n\r\n  const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n    const thunk = changeTodolistTitleTC(id, title)\r\n    dispatch(thunk)\r\n  }, [dispatch])\r\n\r\n  const addTodolist = useCallback((title: string) => {\r\n    const thunk = addTodolistTC(title)\r\n    dispatch(thunk)\r\n  }, [dispatch])\r\n\r\n  if (!isLoggedIn) {\r\n    return <Redirect to={\"/login\"}/>\r\n  }\r\n\r\n  return <>\r\n    <Grid container style={{padding: '20px'}}>\r\n      <AddItemForm addItem={addTodolist}/>\r\n    </Grid>\r\n    <Grid container spacing={3}>\r\n      {\r\n        todolists.map(tl => {\r\n          let allTodolistTasks = tasks[tl.id]\r\n\r\n          return <Grid item key={tl.id}>\r\n            <Paper style={{padding: '10px'}}>\r\n              <Todolist\r\n                todolist={tl}\r\n                tasks={allTodolistTasks}\r\n                removeTask={removeTask}\r\n                changeFilter={changeFilter}\r\n                addTask={addTask}\r\n                changeTaskStatus={changeStatus}\r\n                removeTodolist={removeTodolist}\r\n                changeTaskTitle={changeTaskTitle}\r\n                changeTodolistTitle={changeTodolistTitle}\r\n                demo={demo}\r\n              />\r\n            </Paper>\r\n          </Grid>\r\n        })\r\n      }\r\n    </Grid>\r\n  </>\r\n}\r\n","import React from 'react'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {AppRootStateType} from '../../app/store'\nimport {setAppErrorAC} from '../../app/app-reducer'\n\nfunction Alert(props: AlertProps) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />\n}\n\nexport function ErrorSnackbar() {\n  //const [open, setOpen] = React.useState(true)\n  const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\n  const dispatch = useDispatch()\n\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n    if (reason === 'clickaway') {\n      return\n    }\n    dispatch(setAppErrorAC({error: null}));\n  }\n\n\n  const isOpen = error !== null;\n\n  return (\n    <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\n      <Alert onClose={handleClose} severity=\"error\">\n        {error}\n      </Alert>\n    </Snackbar>\n  )\n}\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from 'formik'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {loginTC} from './auth-reducer'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'Email is required'\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'Password is required'\r\n                }\r\n            }\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"/\"} />\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>\r\n                            To log in get registered <a href={'https://social-network.samuraijs.com/'}\r\n                                                        target={'_blank'}>here</a>\r\n                        </p>\r\n                        <p>\r\n                            or use common test account credentials:\r\n                        </p>\r\n                        <p> Email: free@samuraijs.com\r\n                        </p>\r\n                        <p>\r\n                            Password: free\r\n                        </p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps(\"rememberMe\")}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n  AppBar,\r\n  Button,\r\n  CircularProgress,\r\n  Container,\r\n  IconButton,\r\n  LinearProgress,\r\n  Toolbar,\r\n  Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from 'features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from 'components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport {BrowserRouter, Route} from 'react-router-dom'\r\nimport {Login} from 'features/Login/Login'\r\nimport {logoutTC} from 'features/Login/auth-reducer'\r\n\r\ntype PropsType = {\r\n  demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n  const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n  const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n\r\n    if (!demo) {\r\n      dispatch(initializeAppTC())\r\n    }\r\n\r\n  }, [demo, dispatch])\r\n\r\n  const logoutHandler = useCallback(() => {\r\n    dispatch(logoutTC())\r\n  }, [dispatch])\r\n\r\n  if (!isInitialized) {\r\n    return <div\r\n      style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n      <CircularProgress/>\r\n    </div>\r\n  }\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      <div className=\"App\">\r\n        <ErrorSnackbar/>\r\n        <AppBar position=\"static\">\r\n          <Toolbar>\r\n            <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n              <Menu/>\r\n            </IconButton>\r\n            <Typography variant=\"h6\">\r\n              News\r\n            </Typography>\r\n            {isLoggedIn &&\r\n              <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n          </Toolbar>\r\n          {status === 'loading' && <LinearProgress/>}\r\n        </AppBar>\r\n        <Container fixed>\r\n          <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n          <Route path={'/login'} render={() => <Login/>}/>\r\n        </Container>\r\n      </div>\r\n    </BrowserRouter>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from '../features/Login/auth-reducer'\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n  tasks: tasksReducer,\r\n  todolists: todolistsReducer,\r\n  app: appReducer,\r\n  auth: authReducer\r\n})\r\n\r\nexport type RootReducerType = typeof rootReducer\r\n\r\n// непосредственно создаём store\r\n// export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport const store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './app/App';\r\nimport {store} from 'app/store';\r\nimport {Provider} from 'react-redux';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <BrowserRouter>\r\n      <App/>\r\n    </BrowserRouter>\r\n  </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}