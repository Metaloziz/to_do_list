{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","authReducer","reducer","actions","isInitialized","setAppInitializedAC","appReducer","removeTodolistAC","todolistIndex","findIndex","list","splice","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","changeTodolistEntityStatusAC","setTodolistsAC","push","todolists","map","todolistsReducer","removeTaskAC","taskIndex","addTaskAC","task","todoListId","updateTaskAC","tasks","setTasksAC","extraReducers","builder","addCase","forEach","tasksReducer","updateTaskTC","domainModel","getState","find","t","apiModel","deadline","description","priority","startDate","then","res","resultCode","catch","console","warn","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","key","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","useSelector","auth","removeTaskTC","item","addTaskTC","changeStatus","newTitle","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","errors","type","FormControlLabel","control","App","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","width","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.37da6461.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '6d28cae1-0bac-4f22-abce-7f5967410738'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        const promise = instance.post<ResponseType<{userId?: number}>>('auth/login', data);\r\n        return promise;\r\n    },\r\n    logout() {\r\n        const promise = instance.delete<ResponseType<{userId?: number}>>('auth/login');\r\n        return promise;\r\n    },\r\n    me() {\r\n       const promise =  instance.get<ResponseType<{id: number; email: string; login: string}>>('auth/me');\r\n       return promise\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import {\r\n  setAppErrorAC,\r\n  SetAppErrorActionType,\r\n  setAppStatusAC,\r\n  SetAppStatusActionType\r\n} from 'app/app-reducer'\r\nimport {ResponseType} from 'api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n  if (data.messages.length) {\r\n    dispatch(setAppErrorAC({error: data.messages[0]}))\r\n  } else {\r\n    dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n  }\r\n  dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n  dispatch(setAppErrorAC({error: error.message ? error.message : 'Some error occurred'}))\r\n  dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {setAppStatusAC} from 'app/app-reducer'\r\nimport {authAPI, LoginParamsType} from 'api/todolists-api'\r\nimport {\r\n  handleServerAppError,\r\n  handleServerNetworkError\r\n} from 'utils/error-utils'\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n  isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n  name: 'Auth',\r\n  initialState: initialState,\r\n  reducers: {\r\n    setIsLoggedInAC(state, action: PayloadAction<{ isLoggedIn: boolean }>) {\r\n      state.isLoggedIn = action.payload.isLoggedIn\r\n    }\r\n  }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\n\r\nexport const {setIsLoggedInAC} = slice.actions\r\n\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n  dispatch(setAppStatusAC({status: \"loading\"}))\r\n  authAPI.login(data)\r\n    .then(res => {\r\n      if (res.data.resultCode === 0) {\r\n        dispatch(setIsLoggedInAC({isLoggedIn: true}))\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n      } else {\r\n        handleServerAppError(res.data, dispatch)\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n  dispatch(setAppStatusAC({status: 'loading'}))\r\n  authAPI.logout()\r\n    .then(res => {\r\n      if (res.data.resultCode === 0) {\r\n        dispatch(setIsLoggedInAC({isLoggedIn: false}))\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n      } else {\r\n        handleServerAppError(res.data, dispatch)\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {authAPI} from 'api/todolists-api'\r\nimport {setIsLoggedInAC} from 'features/Login/auth-reducer'\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: InitialStateType = {\r\n  status: 'idle',\r\n  error: null,\r\n  isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n  name: 'App',\r\n  initialState: initialState,\r\n  reducers: {\r\n    setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n      state.status = action.payload.status\r\n    },\r\n    setAppInitializedAC(state, action: PayloadAction<{ isInitialized: boolean }>) {\r\n      state.isInitialized = action.payload.isInitialized\r\n    },\r\n    setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n      state.error = action.payload.error\r\n    }\r\n  }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\nexport const {setAppStatusAC, setAppInitializedAC, setAppErrorAC} = slice.actions\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n  // происходит ли сейчас взаимодействие с сервером\r\n  status: RequestStatusType\r\n  // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n  error: string | null\r\n  // true когда приложение проинициализировалось (проверили юзера, настройки получили и т.д.)\r\n  isInitialized: boolean\r\n}\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n  authAPI.me().then(res => {\r\n    if (res.data.resultCode === 0) {\r\n      dispatch(setIsLoggedInAC({isLoggedIn: true}));\r\n    } else {\r\n\r\n    }\r\n    dispatch(setAppInitializedAC({isInitialized: true}));\r\n  })\r\n}\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n","import {todolistsAPI, TodolistType} from 'api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {\r\n  RequestStatusType,\r\n  SetAppErrorActionType,\r\n  setAppStatusAC,\r\n  SetAppStatusActionType\r\n} from 'app/app-reducer'\r\nimport {handleServerNetworkError} from 'utils/error-utils'\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport produce from \"immer\"\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nconst slice = createSlice({\r\n  name: 'Todolist',\r\n  initialState: initialState,\r\n  reducers: {\r\n    removeTodolistAC(state, action: PayloadAction<{ id: string }>) {\r\n      let todolistIndex = state.findIndex((list) => list.id === action.payload.id)\r\n      if (todolistIndex !== -1) {\r\n        state.splice(todolistIndex, 1)\r\n      }\r\n    },\r\n    addTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>) {\r\n      state.unshift({\r\n        ...action.payload.todolist,\r\n        filter: 'all',\r\n        entityStatus: 'idle'\r\n      })\r\n    },\r\n    changeTodolistTitleAC(state, action: PayloadAction<{ id: string, title: string }>) {\r\n      let todolistIndex = state.findIndex((list) => list.id === action.payload.id)\r\n      if (todolistIndex !== -1) {\r\n        state[todolistIndex].title = action.payload.title\r\n      }\r\n    },\r\n    changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n      let todolistIndex = state.findIndex((list) => list.id === action.payload.id)\r\n      if (todolistIndex !== -1) {\r\n        state[todolistIndex].filter = action.payload.filter\r\n      }\r\n    },\r\n    changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n      let todolistIndex = state.findIndex((list) => list.id === action.payload.id)\r\n      if (todolistIndex !== -1) {\r\n        state[todolistIndex].entityStatus = action.payload.status\r\n      }\r\n    },\r\n    setTodolistsAC(state, action: PayloadAction<{ todolists: Array<TodolistType> }>) {\r\n\r\n      let filter: FilterValuesType = \"all\"\r\n      let entityStatus: RequestStatusType = \"idle\"\r\n\r\n      state.push(...action.payload.todolists.map((list) => ({\r\n        ...list, filter, entityStatus\r\n      })))\r\n    },\r\n  }\r\n})\r\n\r\nexport const todolistsReducer = slice.reducer\r\n\r\nexport const {\r\n  removeTodolistAC,\r\n  changeTodolistTitleAC,\r\n  changeTodolistFilterAC,\r\n  changeTodolistEntityStatusAC,\r\n  setTodolistsAC,\r\n  addTodolistAC\r\n} = slice.actions\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n  return (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.getTodolists()\r\n      .then((res) => {\r\n        dispatch(setTodolistsAC({todolists: res.data}))\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n      })\r\n      .catch(error => {\r\n        handleServerNetworkError(error, dispatch);\r\n      })\r\n  }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n  return (dispatch: Dispatch) => {\r\n    //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n    dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n    todolistsAPI.deleteTodolist(todolistId)\r\n      .then((res) => {\r\n        dispatch(removeTodolistAC({id: todolistId}))\r\n        //скажем глобально приложению, что асинхронная операция завершена\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n      })\r\n  }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n  return (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.createTodolist(title)\r\n      .then((res) => {\r\n        dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n      })\r\n  }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n  return (dispatch: Dispatch) => {\r\n    todolistsAPI.updateTodolist(id, title)\r\n      .then((res) => {\r\n        dispatch(changeTodolistTitleAC({id, title}))\r\n      })\r\n  }\r\n}\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n  filter: FilterValuesType\r\n  entityStatus: RequestStatusType\r\n}\r\n","import {addTodolistAC, removeTodolistAC, setTodolistsAC} from './todolists-reducer'\r\nimport {\r\n  TaskPriorities,\r\n  TaskStatuses,\r\n  TaskType,\r\n  todolistsAPI,\r\n  UpdateTaskModelType\r\n} from 'api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from 'app/store'\r\nimport {setAppStatusAC} from 'app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from 'utils/error-utils'\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nconst slice = createSlice({\r\n  name: 'Tasks',\r\n  initialState: initialState,\r\n  reducers: {\r\n    removeTaskAC(state, action: PayloadAction<{ taskId: string, todolistId: string }>) {\r\n      const {todolistId, taskId} = action.payload\r\n      let taskIndex = state[todolistId].findIndex(({id}) => id === taskId)\r\n      if (taskIndex !== -1) {\r\n        state[todolistId].splice(taskIndex, 1)\r\n      }\r\n    },\r\n    addTaskAC(state, action: PayloadAction<{ task: TaskType }>) {\r\n      const {task} = action.payload\r\n      state[task.todoListId].unshift(task)\r\n    },\r\n    updateTaskAC(state, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todolistId: string }>) {\r\n      const {taskId, todolistId, model} = action.payload\r\n      const tasks = state[todolistId]\r\n      const taskIndex = state[todolistId].findIndex(({id}) => id === taskId)\r\n      if (taskIndex !== -1) {\r\n        tasks[taskIndex] = {...tasks[taskIndex], ...model}\r\n      }\r\n    },\r\n    setTasksAC(state, action: PayloadAction<{ tasks: Array<TaskType>, todolistId: string }>) {\r\n      const {todolistId, tasks} = action.payload\r\n      state[todolistId].unshift(...tasks)\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(addTodolistAC, (state, action) => {\r\n      state[action.payload.todolist.id] = []\r\n    })\r\n    builder.addCase(removeTodolistAC, (state, action) => {\r\n      delete state[action.payload.id]\r\n    })\r\n    builder.addCase(setTodolistsAC, (state, action) => {\r\n      action.payload.todolists.forEach(({id}) => {\r\n        state[id] = []\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n  //   {\r\n  //   [addTodolistAC.type]: (state, action) => {\r\n  //     state[action.todolistId] = []\r\n  //   },\r\n  //   [removeTodolistAC.type]: (state, action) => {\r\n  //     delete state[action.todolistId]\r\n  //   },\r\n  //   [setTodolistsAC.type]: (state, action) => {\r\n  //   },\r\n  //\r\n  // }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer\r\nexport const {removeTaskAC, setTasksAC, updateTaskAC, addTaskAC} = slice.actions\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n  dispatch(setAppStatusAC({status: 'loading'}))\r\n  todolistsAPI.getTasks(todolistId)\r\n    .then((res) => {\r\n      const tasks = res.data.items\r\n      dispatch(setTasksAC({tasks, todolistId}))\r\n      dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n  todolistsAPI.deleteTask(todolistId, taskId)\r\n    .then(res => {\r\n      const action = removeTaskAC({taskId, todolistId})\r\n      dispatch(action)\r\n    })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n  dispatch(setAppStatusAC({status: 'loading'}))\r\n  todolistsAPI.createTask(todolistId, title)\r\n    .then(res => {\r\n      if (res.data.resultCode === 0) {\r\n        const task = res.data.data.item\r\n        const action = addTaskAC({task})\r\n        dispatch(action)\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n      } else {\r\n        handleServerAppError(res.data, dispatch);\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n  (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    const state = getState()\r\n    const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n    if (!task) {\r\n      //throw new Error(\"task not found in the state\");\r\n      console.warn('task not found in the state')\r\n      return\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n      deadline: task.deadline,\r\n      description: task.description,\r\n      priority: task.priority,\r\n      startDate: task.startDate,\r\n      title: task.title,\r\n      status: task.status,\r\n      ...domainModel\r\n    }\r\n\r\n    todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n      .then(res => {\r\n        if (res.data.resultCode === 0) {\r\n          const action = updateTaskAC({taskId, model: domainModel, todolistId})\r\n          dispatch(action)\r\n        } else {\r\n          handleServerAppError(res.data, dispatch);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        handleServerNetworkError(error, dispatch);\r\n      })\r\n  }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n  title?: string\r\n  description?: string\r\n  status?: TaskStatuses\r\n  priority?: TaskPriorities\r\n  startDate?: string\r\n  deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n  [key: string]: Array<TaskType>\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n  addItem: (title: string) => void\r\n  disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({\r\n                                                  addItem,\r\n                                                  disabled = false\r\n                                                }: AddItemFormPropsType) {\r\n  console.log(\"AddItemForm called\")\r\n\r\n  let [title, setTitle] = useState(\"\")\r\n  let [error, setError] = useState<string | null>(null)\r\n\r\n  const addItemHandler = () => {\r\n    if (title.trim() !== \"\") {\r\n      addItem(title);\r\n      setTitle(\"\");\r\n    } else {\r\n      setError(\"Title is required\");\r\n    }\r\n  }\r\n\r\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.currentTarget.value)\r\n  }\r\n\r\n  const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (error !== null) {\r\n      setError(null);\r\n    }\r\n    if (e.charCode === 13) {\r\n      addItemHandler();\r\n    }\r\n  }\r\n\r\n  return <div>\r\n    <TextField variant=\"outlined\"\r\n               disabled={disabled}\r\n               error={!!error}\r\n               value={title}\r\n               onChange={onChangeHandler}\r\n               onKeyPress={onKeyPressHandler}\r\n               label=\"Title\"\r\n               helperText={error}\r\n    />\r\n    <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n      <AddBox/>\r\n    </IconButton>\r\n  </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from 'components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from 'api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n  task: TaskType\r\n  todolistId: string\r\n  changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n  changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n  removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n  const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n  const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n    let newIsDoneValue = e.currentTarget.checked\r\n    props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n  }, [props.task.id, props.todolistId]);\r\n\r\n  const onTitleChangeHandler = useCallback((newValue: string) => {\r\n    props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n  }, [props.task.id, props.todolistId]);\r\n\r\n  return <div key={props.task.id}\r\n              className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n    <Checkbox\r\n      checked={props.task.status === TaskStatuses.Completed}\r\n      color=\"primary\"\r\n      onChange={onChangeHandler}\r\n    />\r\n\r\n    <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n    <IconButton onClick={onClickHandler}>\r\n      <Delete/>\r\n    </IconButton>\r\n  </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from 'components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from 'components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from 'api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n  todolist: TodolistDomainType\r\n  tasks: Array<TaskType>\r\n  changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n  addTask: (title: string, todolistId: string) => void\r\n  changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n  changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n  removeTask: (taskId: string, todolistId: string) => void\r\n  removeTodolist: (id: string) => void\r\n  changeTodolistTitle: (id: string, newTitle: string) => void\r\n  demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n  console.log('Todolist called')\r\n\r\n  const dispatch = useDispatch()\r\n  useEffect(() => {\r\n    if (demo) {\r\n      return\r\n    }\r\n    const thunk = fetchTasksTC(props.todolist.id)\r\n    dispatch(thunk)\r\n  }, [])\r\n\r\n  const addTask = useCallback((title: string) => {\r\n    props.addTask(title, props.todolist.id)\r\n  }, [props.addTask, props.todolist.id])\r\n\r\n  const removeTodolist = () => {\r\n    props.removeTodolist(props.todolist.id)\r\n  }\r\n  const changeTodolistTitle = useCallback((title: string) => {\r\n    props.changeTodolistTitle(props.todolist.id, title)\r\n  }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n  const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n  const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n  const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n  let tasksForTodolist = props.tasks\r\n\r\n  if (props.todolist.filter === 'active') {\r\n    tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n  }\r\n  if (props.todolist.filter === 'completed') {\r\n    tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n  }\r\n\r\n  return <div>\r\n    <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n      <IconButton onClick={removeTodolist}\r\n                  disabled={props.todolist.entityStatus === 'loading'}>\r\n        <Delete/>\r\n      </IconButton>\r\n    </h3>\r\n    <AddItemForm addItem={addTask}\r\n                 disabled={props.todolist.entityStatus === 'loading'}/>\r\n    <div>\r\n      {\r\n        tasksForTodolist.map(t => <Task key={t.id} task={t}\r\n                                        todolistId={props.todolist.id}\r\n                                        removeTask={props.removeTask}\r\n                                        changeTaskTitle={props.changeTaskTitle}\r\n                                        changeTaskStatus={props.changeTaskStatus}\r\n        />)\r\n      }\r\n    </div>\r\n    <div style={{paddingTop: '10px'}}>\r\n      <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n              onClick={onAllClickHandler}\r\n              color={'default'}\r\n      >All\r\n      </Button>\r\n      <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n              onClick={onActiveClickHandler}\r\n              color={'primary'}>Active\r\n      </Button>\r\n      <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n              onClick={onCompletedClickHandler}\r\n              color={'secondary'}>Completed\r\n      </Button>\r\n    </div>\r\n  </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from 'app/store'\r\nimport {\r\n  addTodolistTC,\r\n  changeTodolistFilterAC,\r\n  changeTodolistTitleTC,\r\n  fetchTodolistsTC,\r\n  FilterValuesType,\r\n  removeTodolistTC,\r\n  TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from 'api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from 'components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Navigate} from 'react-router-dom'\r\n\r\ntype PropsType = {\r\n  demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n  const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n  const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    if (demo || !isLoggedIn) {\r\n      return;\r\n    }\r\n    const thunk = fetchTodolistsTC()\r\n    dispatch(thunk)\r\n  }, [])\r\n\r\n  const removeTask = useCallback(function (id: string, todolistId: string) {\r\n    const thunk = removeTaskTC(id, todolistId)\r\n    dispatch(thunk)\r\n  }, [])\r\n\r\n  const addTask = useCallback(function (title: string, todolistId: string) {\r\n    const thunk = addTaskTC(title, todolistId)\r\n    dispatch(thunk)\r\n  }, [])\r\n\r\n  const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n    const thunk = updateTaskTC(id, {status}, todolistId)\r\n    dispatch(thunk)\r\n  }, [])\r\n\r\n  const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n    const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n    dispatch(thunk)\r\n  }, [])\r\n\r\n  const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n    const action = changeTodolistFilterAC({id: todolistId, filter: value})\r\n    dispatch(action)\r\n  }, [])\r\n\r\n  const removeTodolist = useCallback(function (id: string) {\r\n    const thunk = removeTodolistTC(id)\r\n    dispatch(thunk)\r\n  }, [])\r\n\r\n  const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n    const thunk = changeTodolistTitleTC(id, title)\r\n    dispatch(thunk)\r\n  }, [])\r\n\r\n  const addTodolist = useCallback((title: string) => {\r\n    const thunk = addTodolistTC(title)\r\n    dispatch(thunk)\r\n  }, [dispatch])\r\n\r\n  if (!isLoggedIn) {\r\n    return <Navigate to=\"/login\"/>;\r\n  }\r\n\r\n  return <>\r\n    <Grid container style={{padding: '20px'}}>\r\n      <AddItemForm addItem={addTodolist}/>\r\n    </Grid>\r\n    <Grid container spacing={3}>\r\n      {\r\n        todolists.map(tl => {\r\n          let allTodolistTasks = tasks[tl.id]\r\n\r\n          return <Grid item key={tl.id}>\r\n            <Paper style={{padding: '10px'}}>\r\n              <Todolist\r\n                todolist={tl}\r\n                tasks={allTodolistTasks}\r\n                removeTask={removeTask}\r\n                changeFilter={changeFilter}\r\n                addTask={addTask}\r\n                changeTaskStatus={changeStatus}\r\n                removeTodolist={removeTodolist}\r\n                changeTaskTitle={changeTaskTitle}\r\n                changeTodolistTitle={changeTodolistTitle}\r\n                demo={demo}\r\n              />\r\n            </Paper>\r\n          </Grid>\r\n        })\r\n      }\r\n    </Grid>\r\n  </>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from 'app/store'\r\nimport {setAppErrorAC} from 'app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n  const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n  const dispatch = useDispatch()\r\n\r\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n    if (reason === 'clickaway') {\r\n      return\r\n    }\r\n    dispatch(setAppErrorAC({error: null}));\r\n  }\r\n\r\n\r\n  const isOpen = error !== null;\r\n\r\n  return (\r\n    <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n      <Alert onClose={handleClose} severity=\"error\">\r\n        {error}\r\n      </Alert>\r\n    </Snackbar>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport {\r\n  Checkbox,\r\n  FormControl,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  FormLabel,\r\n  TextField,\r\n  Button,\r\n  Grid\r\n} from '@material-ui/core'\r\nimport {useFormik} from 'formik'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {loginTC} from './auth-reducer'\r\nimport {AppRootStateType} from 'app/store'\r\nimport {Navigate} from 'react-router-dom'\r\n\r\nexport const Login = () => {\r\n  const dispatch = useDispatch()\r\n\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n\r\n  const formik = useFormik({\r\n    validate: (values) => {\r\n      if (!values.email) {\r\n        return {\r\n          email: 'Email is required'\r\n        }\r\n      }\r\n      if (!values.password) {\r\n        return {\r\n          password: 'Password is required'\r\n        }\r\n      }\r\n\r\n    },\r\n    initialValues: {\r\n      email: '',\r\n      password: '',\r\n      rememberMe: false\r\n    },\r\n    onSubmit: values => {\r\n      dispatch(loginTC(values));\r\n    },\r\n  })\r\n\r\n  if (isLoggedIn) {\r\n    return <Navigate to=\"/\"/>;\r\n  }\r\n\r\n\r\n  return <Grid container justify=\"center\">\r\n    <Grid item xs={4}>\r\n      <form onSubmit={formik.handleSubmit}>\r\n        <FormControl>\r\n          <FormLabel>\r\n            <p>\r\n              To log in get registered <a\r\n              href={'https://social-network.samuraijs.com/'}\r\n              target={'_blank'}>here</a>\r\n            </p>\r\n            <p>\r\n              or use common test account credentials:\r\n            </p>\r\n            <p> Email: free@samuraijs.com\r\n            </p>\r\n            <p>\r\n              Password: free\r\n            </p>\r\n          </FormLabel>\r\n          <FormGroup>\r\n            <TextField\r\n              label=\"Email\"\r\n              margin=\"normal\"\r\n              {...formik.getFieldProps(\"email\")}\r\n            />\r\n            {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n            <TextField\r\n              type=\"password\"\r\n              label=\"Password\"\r\n              margin=\"normal\"\r\n              {...formik.getFieldProps(\"password\")}\r\n            />\r\n            {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n            <FormControlLabel\r\n              label={'Remember me'}\r\n              control={<Checkbox\r\n                {...formik.getFieldProps(\"rememberMe\")}\r\n                checked={formik.values.rememberMe}\r\n              />}\r\n            />\r\n            <Button type={'submit'} variant={'contained'}\r\n                    color={'primary'}>Login</Button>\r\n          </FormGroup>\r\n        </FormControl>\r\n      </form>\r\n    </Grid>\r\n  </Grid>\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n  AppBar,\r\n  Button,\r\n  CircularProgress,\r\n  Container,\r\n  IconButton,\r\n  LinearProgress,\r\n  Toolbar,\r\n  Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from 'features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from 'components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport {Navigate, Route, Routes} from 'react-router-dom'\r\nimport {Login} from 'features/Login/Login'\r\nimport {logoutTC} from 'features/Login/auth-reducer'\r\n\r\n\r\ntype PropsType = {\r\n  demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n  const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n  const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    dispatch(initializeAppTC())\r\n  }, [])\r\n\r\n  const logoutHandler = useCallback(() => {\r\n    dispatch(logoutTC())\r\n  }, [])\r\n\r\n  if (!isInitialized) {\r\n    return <div\r\n      style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n      <CircularProgress/>\r\n    </div>\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <ErrorSnackbar/>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n            <Menu/>\r\n          </IconButton>\r\n          <Typography variant=\"h6\">\r\n            Todolist\r\n          </Typography>\r\n          {isLoggedIn &&\r\n            <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n        </Toolbar>\r\n        {status === 'loading' && <LinearProgress/>}\r\n      </AppBar>\r\n      <Container fixed>\r\n        <Routes>\r\n          <Route path=\"/login\" element={<Login/>}/>\r\n          <Route path={'/'} element={<TodolistsList demo={demo}/>}/>\r\n          <Route path=\"/404\" element={<h1>404: PAGE NOT FOUND</h1>}/>\r\n          <Route path=\"*\" element={<Navigate to=\"/404\"/>}/>\r\n        </Routes>\r\n      </Container>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from 'features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from 'features/TodolistsList/todolists-reducer';\r\nimport {combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from 'features/Login/auth-reducer'\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n  tasks: tasksReducer,\r\n  todolists: todolistsReducer,\r\n  app: appReducer,\r\n  auth: authReducer\r\n})\r\n\r\nexport const store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './app/App';\r\nimport {store} from './app/store';\r\nimport {Provider} from 'react-redux';\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <HashRouter>\r\n    <Provider store={store}>\r\n      <App/>\r\n    </Provider>\r\n  </HashRouter>\r\n  , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}