{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","authReducer","reducer","actions","isInitialized","setAppInitializedAC","appReducer","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","then","res","resultCode","type","updateTaskAC","catch","console","warn","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","key","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","todolist","items","setTasksAC","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","entityStatus","map","style","paddingTop","Button","TodolistsList","todolists","useSelector","auth","removeTaskAC","removeTaskTC","addTaskAC","item","addTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","errors","FormControlLabel","control","App","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","width","CircularProgress","rootReducer","combineReducers","todoListId","copyState","forEach","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iRAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WC8DMC,EAMAC,E,gHA9ENC,E,OAAWC,EAAMC,OAAN,aACbC,QAAS,iDAPI,CACbC,iBAAiB,EACjBC,QAAS,CACL,UAAW,2CASNC,EAAe,WAGpB,OADgBN,EAASO,IAAoB,eAFxCD,EAAe,SAKTE,GAEX,OADgBR,EAASS,KAA2C,aAAc,CAACD,MAAOA,KANrFF,EAAe,SASTI,GAEX,OADgBV,EAASW,OAAT,qBAA4CD,KAVvDJ,EAAe,SAaTI,EAAYF,GAEvB,OADgBR,EAASY,IAAT,qBAAyCF,GAAM,CAACF,MAAOA,KAdlEF,EAAe,SAiBfO,GACL,OAAOb,EAASO,IAAT,qBAA6CM,EAA7C,YAlBFP,EAAe,SAoBbO,EAAoBC,GAC3B,OAAOd,EAASW,OAAT,qBAA4CE,EAA5C,kBAAgEC,KArBlER,EAAe,SAuBbO,EAAoBE,GAC3B,OAAOf,EAASS,KAAT,qBAA6DI,EAA7D,UAAiF,CAACL,MAAOO,KAxB3FT,EAAe,SA0BbO,EAAoBC,EAAgBE,GAC3C,OAAOhB,EAASY,IAAT,qBAAmDC,EAAnD,kBAAuEC,GAAUE,IAYnFC,EAAU,SACbC,GAEF,OADgBlB,EAASS,KAAsC,aAAcS,IAFxED,EAAU,WAOf,OADgBjB,EAASW,OAAwC,eAN5DM,EAAU,WAWhB,OADiBjB,EAASO,IAA8D,a,SAiBnFT,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAMAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,KC7EL,IAAMoB,EAAuB,SAAID,EAAuBE,GACzDF,EAAKG,SAASC,OAChBF,EAASG,EAAc,CAACC,MAAON,EAAKG,SAAS,MAE7CD,EAASG,EAAc,CAACC,MAAO,yBAEjCJ,EAASK,EAAe,CAACC,OAAQ,aAGtBC,EAA2B,SAACH,EAA4BJ,GACnEA,EAASG,EAAc,CAACC,MAAOA,EAAMI,QAAUJ,EAAMI,QAAU,yBAC/DR,EAASK,EAAe,CAACC,OAAQ,a,QCP7BG,EAAQC,YAAY,CACxBC,KAAM,OACNC,aANmB,CACnBC,YAAY,GAMZC,SAAU,CACRC,gBADQ,SACQC,EAAOC,GACrBD,EAAMH,WAAaI,EAAOC,QAAQL,eAK3BM,EAAcV,EAAMW,QAEnBL,EAAmBN,EAAMY,QAAzBN,gBCdRN,EAAQC,YAAY,CACxBC,KAAM,MACNC,aARqC,CACrCN,OAAQ,OACRF,MAAO,KACPkB,eAAe,GAMfR,SAAU,CACRT,eADQ,SACOW,EAAOC,GACpBD,EAAMV,OAASW,EAAOC,QAAQZ,QAEhCiB,oBAJQ,SAIYP,EAAOC,GACzBD,EAAMM,cAAgBL,EAAOC,QAAQI,eAEvCnB,cAPQ,SAOMa,EAAOC,GACnBD,EAAMZ,MAAQa,EAAOC,QAAQd,UAKtBoB,EAAaf,EAAMW,Q,EACoCX,EAAMY,QAA5DhB,E,EAAAA,eAAgBkB,E,EAAAA,oBAAqBpB,E,EAAAA,cClB7CS,EAA0C,G,QCc1CA,EAA+B,GAoFxBa,EAAe,SAAC/B,EAAgBgC,EAAwCjC,GAAzD,OAC1B,SAACO,EAAyB2B,GACxB,IACMC,EADQD,IACKE,MAAMpC,GAAYqC,MAAK,SAAAC,GAAC,OAAIA,EAAEzC,KAAOI,KACxD,GAAKkC,EAAL,CAMA,IAAMI,EAA6B,aACjCC,SAAUL,EAAKK,SACfC,YAAaN,EAAKM,YAClBC,SAAUP,EAAKO,SACfC,UAAWR,EAAKQ,UAChBhD,MAAOwC,EAAKxC,MACZkB,OAAQsB,EAAKtB,QACVoB,GAGLxC,EAAwBO,EAAYC,EAAQsC,GACzCK,MAAK,SAAAC,GACJ,GAA4B,IAAxBA,EAAIxC,KAAKyC,WAAkB,CAC7B,IAAMtB,EA9DY,SAACvB,EAAgBE,EAAkCH,GAAnD,MACzB,CAAC+C,KAAM,cAAe5C,QAAOH,aAAYC,UA6DnB+C,CAAa/C,EAAQgC,EAAajC,GACjDO,EAASiB,QAETlB,EAAqBuC,EAAIxC,KAAME,MAGlC0C,OAAM,SAACtC,GACNG,EAAyBH,EAAOJ,WAxBlC2C,QAAQC,KAAK,iC,6CCzGNC,GAAcC,IAAMC,MAAK,SAAS,GAAoD,IAAnDC,EAAkD,EAAlDA,QAAkD,IAAzCC,gBAAyC,SAC9FN,QAAQO,IAAI,sBADkF,MAGtEC,mBAAS,IAH6D,mBAGzF/D,EAHyF,KAGlFgE,EAHkF,OAItED,mBAAwB,MAJ8C,mBAIzF/C,EAJyF,KAIlFiD,EAJkF,KAMxFC,EAAiB,WACE,KAAjBlE,EAAMmE,QACNP,EAAQ5D,GACRgE,EAAS,KAETC,EAAS,sBAiBjB,OAAO,6BACH,kBAACG,EAAA,EAAD,CAAWC,QAAQ,WACRR,SAAUA,EACV7C,QAASA,EACTsD,MAAOtE,EACPuE,SAlBS,SAACC,GACrBR,EAASQ,EAAEC,cAAcH,QAkBdI,WAfW,SAACF,GACT,OAAVxD,GACAiD,EAAS,MAEM,KAAfO,EAAEG,UACFT,KAWOU,MAAM,QACNC,WAAY7D,IAEvB,kBAAC8D,EAAA,EAAD,CAAYC,MAAM,UAAUC,QAASd,EAAgBL,SAAUA,GAC3D,kBAACoB,GAAA,EAAD,W,SCxCCC,GAAexB,IAAMC,MAAK,SAAUwB,GAC7C5B,QAAQO,IAAI,uBAD+D,MAE7CC,oBAAS,GAFoC,mBAEtEqB,EAFsE,KAE5DC,EAF4D,OAGnDtB,mBAASoB,EAAMb,OAHoC,mBAGtEtE,EAHsE,KAG/DgE,EAH+D,KAiB3E,OAAOoB,EACE,kBAAChB,EAAA,EAAD,CAAWE,MAAOtE,EAAOuE,SALd,SAACC,GACjBR,EAASQ,EAAEC,cAAcH,QAI4BgB,WAAS,EAACC,OAT1C,WACrBF,GAAY,GACZF,EAAMZ,SAASvE,MAQb,0BAAMwF,cAda,WACrBH,GAAY,GACZrB,EAASmB,EAAMb,SAY2Ba,EAAMb,U,oBCd3CmB,GAAO/B,IAAMC,MAAK,SAACwB,GAC5B,IAAMO,EAAiBC,uBAAY,kBAAMR,EAAMS,WAAWT,EAAM3C,KAAKtC,GAAIiF,EAAM9E,cAAa,CAAC8E,EAAM3C,KAAKtC,GAAIiF,EAAM9E,aAE5GwF,EAAkBF,uBAAY,SAACnB,GACjC,IAAIsB,EAAiBtB,EAAEC,cAAcsB,QACrCZ,EAAMa,iBAAiBb,EAAM3C,KAAKtC,GAAI4F,EAAiBxG,EAAa2G,UAAY3G,EAAa4G,IAAKf,EAAM9E,cACzG,CAAC8E,EAAM3C,KAAKtC,GAAIiF,EAAM9E,aAEnB8F,EAAuBR,uBAAY,SAACS,GACtCjB,EAAMkB,gBAAgBlB,EAAM3C,KAAKtC,GAAIkG,EAAUjB,EAAM9E,cACtD,CAAC8E,EAAM3C,KAAKtC,GAAIiF,EAAM9E,aAEzB,OAAO,yBAAKiG,IAAKnB,EAAM3C,KAAKtC,GAAIqG,UAAWpB,EAAM3C,KAAKtB,SAAW5B,EAAa2G,UAAY,UAAY,IAClG,kBAACO,GAAA,EAAD,CACIT,QAASZ,EAAM3C,KAAKtB,SAAW5B,EAAa2G,UAC5ClB,MAAM,UACNR,SAAUsB,IAGd,kBAACX,GAAD,CAAcZ,MAAOa,EAAM3C,KAAKxC,MAAOuE,SAAU4B,IACjD,kBAACrB,EAAA,EAAD,CAAYE,QAASU,GACjB,kBAACe,GAAA,EAAD,WCVCC,GAAWhD,IAAMC,MAAK,YAAgD,IAAD,IAApCgD,YAAoC,SAAnBxB,EAAmB,yBAC9E5B,QAAQO,IAAI,mBAEZ,IAAMlD,EAAWgG,cACjBC,qBAAU,WACN,IAAIF,EAAJ,CAGA,IJ2CqBtG,EI3CfyG,GJ2CezG,EI3CM8E,EAAM4B,SAAS7G,GJ2CE,SAACU,GACnDA,EAASK,EAAe,CAACC,OAAQ,aACjCpB,EAAsBO,GACnB4C,MAAK,SAACC,GACL,IAAMT,EAAQS,EAAIxC,KAAKsG,MACvBpG,EAToB,SAAC6B,EAAwBpC,GAAzB,MACvB,CAAC+C,KAAM,YAAaX,QAAOpC,cAQf4G,CAAWxE,EAAOpC,IAC3BO,EAASK,EAAe,CAACC,OAAQ,oBIhD/BN,EAASkG,MACV,IAEH,IAAMI,EAAUvB,uBAAY,SAAC3F,GACzBmF,EAAM+B,QAAQlH,EAAOmF,EAAM4B,SAAS7G,MACrC,CAACiF,EAAM+B,QAAS/B,EAAM4B,SAAS7G,KAK5BiH,EAAsBxB,uBAAY,SAAC3F,GACrCmF,EAAMgC,oBAAoBhC,EAAM4B,SAAS7G,GAAIF,KAC9C,CAACmF,EAAM4B,SAAS7G,GAAIiF,EAAMgC,sBAEvBC,EAAoBzB,uBAAY,kBAAMR,EAAMkC,aAAa,MAAOlC,EAAM4B,SAAS7G,MAAK,CAACiF,EAAM4B,SAAS7G,GAAIiF,EAAMkC,eAC9GC,EAAuB3B,uBAAY,kBAAMR,EAAMkC,aAAa,SAAUlC,EAAM4B,SAAS7G,MAAK,CAACiF,EAAM4B,SAAS7G,GAAIiF,EAAMkC,eACpHE,EAA0B5B,uBAAY,kBAAMR,EAAMkC,aAAa,YAAalC,EAAM4B,SAAS7G,MAAK,CAACiF,EAAM4B,SAAS7G,GAAIiF,EAAMkC,eAG5HG,EAAmBrC,EAAM1C,MAS7B,MAP8B,WAA1B0C,EAAM4B,SAASU,SACfD,EAAmBrC,EAAM1C,MAAMgF,QAAO,SAAA9E,GAAC,OAAIA,EAAEzB,SAAW5B,EAAa4G,QAE3C,cAA1Bf,EAAM4B,SAASU,SACfD,EAAmBrC,EAAM1C,MAAMgF,QAAO,SAAA9E,GAAC,OAAIA,EAAEzB,SAAW5B,EAAa2G,cAGlE,6BACH,4BAAI,kBAACf,GAAD,CAAcZ,MAAOa,EAAM4B,SAAS/G,MAAOuE,SAAU4C,IACrD,kBAACrC,EAAA,EAAD,CAAYE,QAvBG,WACnBG,EAAMuC,eAAevC,EAAM4B,SAAS7G,KAsBK2D,SAA0C,YAAhCsB,EAAM4B,SAASY,cAC1D,kBAAClB,GAAA,EAAD,QAGR,kBAAChD,GAAD,CAAaG,QAASsD,EAASrD,SAA0C,YAAhCsB,EAAM4B,SAASY,eACxD,6BAEQH,EAAiBI,KAAI,SAAAjF,GAAC,OAAI,kBAAC8C,GAAD,CAAMa,IAAK3D,EAAEzC,GAAIsC,KAAMG,EAAGtC,WAAY8E,EAAM4B,SAAS7G,GAC/C0F,WAAYT,EAAMS,WAClBS,gBAAiBlB,EAAMkB,gBACvBL,iBAAkBb,EAAMa,uBAIhE,yBAAK6B,MAAO,CAACC,WAAY,SACrB,kBAACC,EAAA,EAAD,CAAQ1D,QAAmC,QAA1Bc,EAAM4B,SAASU,OAAmB,WAAa,OACxDzC,QAASoC,EACTrC,MAAO,WAFf,OAKA,kBAACgD,EAAA,EAAD,CAAQ1D,QAAmC,WAA1Bc,EAAM4B,SAASU,OAAsB,WAAa,OAC3DzC,QAASsC,EACTvC,MAAO,WAFf,UAIA,kBAACgD,EAAA,EAAD,CAAQ1D,QAAmC,cAA1Bc,EAAM4B,SAASU,OAAyB,WAAa,OAC9DzC,QAASuC,EACTxC,MAAO,aAFf,kB,QChECiD,GAAqC,SAAC,GAAoB,IAAD,IAAlBrB,YAAkB,SAC9DsB,EAAYC,aAAyD,SAAAtG,GAAK,OAAIA,EAAMqG,aACpFxF,EAAQyF,aAA8C,SAAAtG,GAAK,OAAIA,EAAMa,SACrEhB,EAAayG,aAAuC,SAAAtG,GAAK,OAAIA,EAAMuG,KAAK1G,cAExEb,EAAWgG,cAEjBC,qBAAU,WACR,IAAIF,GAASlF,EAAb,CAGA,IAAMqF,ENqCD,SAAClG,GACNA,EAASK,EAAe,CAACC,OAAQ,aACjCpB,IACGmD,MAAK,SAACC,GACLtC,EAX2D,CACjEwC,KAAM,gBACN6E,UAS8B/E,EAAIxC,OAC5BE,EAASK,EAAe,CAACC,OAAQ,kBAElCoC,OAAM,SAAAtC,GACLG,EAAyBH,EAAOJ,OM5CpCA,EAASkG,MACR,IAEH,IAAMlB,EAAaD,uBAAY,SAAUzF,EAAYG,GACnD,IAAMyG,EL6CkB,SAACxG,EAAgBD,GAAjB,OAAwC,SAACO,GACnEd,EAAwBO,EAAYC,GACjC2C,MAAK,SAAAC,GACJ,IAAMrB,EAtBgB,SAACvB,EAAgBD,GAAjB,MACzB,CAAC+C,KAAM,cAAe9C,SAAQD,cAqBZ+H,CAAa9H,EAAQD,GACpCO,EAASiB,OKjDGwG,CAAanI,EAAIG,GAC/BO,EAASkG,KACR,IAEGI,EAAUvB,uBAAY,SAAU3F,EAAeK,GACnD,IAAMyG,EL+Ce,SAAC9G,EAAeK,GAAhB,OAAuC,SAACO,GAC/DA,EAASK,EAAe,CAACC,OAAQ,aACjCpB,EAAwBO,EAAYL,GACjCiD,MAAK,SAAAC,GACJ,GAA4B,IAAxBA,EAAIxC,KAAKyC,WAAkB,CAC7B,IACMtB,EA9BW,SAACW,GAAD,MACtB,CAACY,KAAM,WAAYZ,QA6BC8F,CADFpF,EAAIxC,KAAKA,KAAK6H,MAE3B3H,EAASiB,GACTjB,EAASK,EAAe,CAACC,OAAQ,oBAEjCP,EAAqBuC,EAAIxC,KAAME,MAGlC0C,OAAM,SAACtC,GACNG,EAAyBH,EAAOJ,OK7DpB4H,CAAUxI,EAAOK,GAC/BO,EAASkG,KACR,IAEG2B,EAAe9C,uBAAY,SAAUzF,EAAYgB,EAAsBb,GAC3E,IAAMyG,EAAQzE,EAAanC,EAAI,CAACgB,UAASb,GACzCO,EAASkG,KACR,IAEGT,EAAkBV,uBAAY,SAAUzF,EAAYwI,EAAkBrI,GAC1E,IAAMyG,EAAQzE,EAAanC,EAAI,CAACF,MAAO0I,GAAWrI,GAClDO,EAASkG,KACR,IAEGO,EAAe1B,uBAAY,SAAUrB,EAAyBjE,GAClE,IAAMwB,ENHuE,CAC/EuB,KAAM,yBACNlD,GMCwCG,ENAxCoH,OMAoDnD,GAClD1D,EAASiB,KACR,IAEG6F,EAAiB/B,uBAAY,SAAUzF,GAC3C,INmB6BG,EMnBvByG,GNmBuBzG,EMnBEH,ENoB1B,SAACU,GAENA,EAASK,EAAe,CAACC,OAAQ,aAEjCN,EA3BoF,CACtFwC,KAAM,gCAAiClD,GA0BCG,EA1BGa,OA0BS,YAClDpB,EAA4BO,GACzB4C,MAAK,SAACC,GACLtC,EAhDwB,SAACV,GAAD,MAAiB,CAC/CkD,KAAM,kBACNlD,MA8CeyI,CAAiBtI,IAE1BO,EAASK,EAAe,CAACC,OAAQ,oBM5BrCN,EAASkG,KACR,IAEGK,EAAsBxB,uBAAY,SAAUzF,EAAYF,GAC5D,IAAM8G,ENsC2B,SAAC5G,EAAYF,GAChD,OAAO,SAACY,GACNd,EAA4BI,EAAIF,GAC7BiD,MAAK,SAACC,GACLtC,EA5D6B,SAACV,EAAYF,GAAb,MAAgC,CACnEoD,KAAM,wBACNlD,KACAF,SAyDe4I,CAAsB1I,EAAIF,QM1CzB6I,CAAsB3I,EAAIF,GACxCY,EAASkG,KACR,IAEGgC,EAAcnD,uBAAY,SAAC3F,GAC/B,IAAM8G,ENuBmB,SAAC9G,GAC5B,OAAO,SAACY,GACNA,EAASK,EAAe,CAACC,OAAQ,aACjCpB,EAA4BE,GACzBiD,MAAK,SAACC,GACLtC,EAvDkD,CACxDwC,KAAM,eACN2D,SAqD6B7D,EAAIxC,KAAKA,KAAK6H,OACrC3H,EAASK,EAAe,CAACC,OAAQ,mBM7BvB6H,CAAc/I,GAC5BY,EAASkG,KACR,CAAClG,IAEJ,OAAKa,EAIE,oCACL,kBAACuH,EAAA,EAAD,CAAMC,WAAS,EAACpB,MAAO,CAACqB,QAAS,SAC/B,kBAACzF,GAAD,CAAaG,QAASkF,KAExB,kBAACE,EAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,GAErBlB,EAAUL,KAAI,SAAAwB,GACZ,IAAIC,EAAmB5G,EAAM2G,EAAGlJ,IAEhC,OAAO,kBAAC8I,EAAA,EAAD,CAAMT,MAAI,EAACjC,IAAK8C,EAAGlJ,IACxB,kBAACoJ,EAAA,EAAD,CAAOzB,MAAO,CAACqB,QAAS,SACtB,kBAACxC,GAAD,CACEK,SAAUqC,EACV3G,MAAO4G,EACPzD,WAAYA,EACZyB,aAAcA,EACdH,QAASA,EACTlB,iBAAkByC,EAClBf,eAAgBA,EAChBrB,gBAAiBA,EACjBc,oBAAqBA,EACrBR,KAAMA,WAxBX,kBAAC,KAAD,CAAU4C,GAAG,Y,oBCxExB,SAASC,GAAMrE,GACb,OAAO,kBAAC,KAAD,eAAUsE,UAAW,EAAGpF,QAAQ,UAAac,IAG/C,SAASuE,KACd,IAAM1I,EAAQkH,aAA6C,SAAAtG,GAAK,OAAIA,EAAM+H,IAAI3I,SACxEJ,EAAWgG,cAEXgD,EAAc,SAACC,EAA8BC,GAClC,cAAXA,GAGJlJ,EAASG,EAAc,CAACC,MAAO,SAI3B+I,EAAmB,OAAV/I,EAEf,OACE,kBAACgJ,GAAA,EAAD,CAAUC,KAAMF,EAAQG,iBAAkB,IAAMC,QAASP,GACvD,kBAAC,GAAD,CAAOO,QAASP,EAAaQ,SAAS,SACnCpJ,I,qDCpBIqJ,GAAQ,WACjB,IAAMzJ,EAAWgG,cAEXnF,EAAayG,aAAuC,SAAAtG,GAAK,OAAIA,EAAMuG,KAAK1G,cAExE6I,EAASC,aAAU,CACrBC,SAAU,SAACC,GACP,OAAKA,EAAOC,MAKPD,EAAOE,cAAZ,EACW,CACHA,SAAU,wBANP,CACHD,MAAO,sBAUnBE,cAAe,CACXF,MAAO,GACPC,SAAU,GACVE,YAAY,GAEhBC,SAAU,SAAAL,GVHK,IAAC/J,EUIZE,GVJYF,EUIK+J,EVJqB,SAAC7J,GACjDA,EAASK,EAAe,CAACC,OAAQ,aACjCT,EAAcC,GACXuC,MAAK,SAAAC,GACwB,IAAxBA,EAAIxC,KAAKyC,YACXvC,EAASe,EAAgB,CAACF,YAAY,KACtCb,EAASK,EAAe,CAACC,OAAQ,gBAEjCP,EAAqBuC,EAAIxC,KAAME,MAGlC0C,OAAM,SAACtC,GACNG,EAAyBH,EAAOJ,YUJlC,OAAIa,EACO,kBAAC,KAAD,CAAU8H,GAAG,MAIjB,kBAACP,EAAA,EAAD,CAAMC,WAAS,EAAC8B,QAAQ,UAC3B,kBAAC/B,EAAA,EAAD,CAAMT,MAAI,EAACyC,GAAI,GACX,0BAAMF,SAAUR,EAAOW,cACnB,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,KACI,uDAC6B,uBAAGC,KAAM,wCACNC,OAAQ,UADX,SAG7B,sEAGA,yDAEA,8CAIJ,kBAACC,GAAA,EAAD,KACI,kBAAClH,EAAA,EAAD,eACIQ,MAAM,QACN2G,OAAO,UACHjB,EAAOkB,cAAc,WAE5BlB,EAAOmB,OAAOf,MAAQ,6BAAMJ,EAAOmB,OAAOf,OAAe,KAC1D,kBAACtG,EAAA,EAAD,eACIhB,KAAK,WACLwB,MAAM,WACN2G,OAAO,UACHjB,EAAOkB,cAAc,cAE5BlB,EAAOmB,OAAOd,SAAW,6BAAML,EAAOmB,OAAOd,UAAkB,KAChE,kBAACe,GAAA,EAAD,CACI9G,MAAO,cACP+G,QAAS,kBAACnF,GAAA,EAAD,iBACD8D,EAAOkB,cAAc,cADpB,CAELzF,QAASuE,EAAOG,OAAOI,gBAG/B,kBAAC9C,EAAA,EAAD,CAAQ3E,KAAM,SAAUiB,QAAS,YAAaU,MAAO,WAArD,eCLT6G,OAjDf,YAAyC,IAAD,IAA1BjF,YAA0B,SAChCzF,EAASgH,aAAiD,SAACtG,GAAD,OAAWA,EAAM+H,IAAIzI,UAC/EgB,EAAgBgG,aAAuC,SAACtG,GAAD,OAAWA,EAAM+H,IAAIzH,iBAC5ET,EAAayG,aAAuC,SAAAtG,GAAK,OAAIA,EAAMuG,KAAK1G,cACxEb,EAAWgG,cAEjBC,qBAAU,WACRjG,GVMiC,SAACA,GACpCH,IAAawC,MAAK,SAAAC,GACY,IAAxBA,EAAIxC,KAAKyC,YACXvC,EAASe,EAAgB,CAACF,YAAY,KAIxCb,EAASuB,EAAoB,CAACD,eAAe,aUZ5C,IAEH,IAAM2J,EAAgBlG,uBAAY,WAChC/E,GXM0B,SAACA,GAC7BA,EAASK,EAAe,CAACC,OAAQ,aACjCT,IACGwC,MAAK,SAAAC,GACwB,IAAxBA,EAAIxC,KAAKyC,YACXvC,EAASe,EAAgB,CAACF,YAAY,KACtCb,EAASK,EAAe,CAACC,OAAQ,gBAEjCP,EAAqBuC,EAAIxC,KAAME,MAGlC0C,OAAM,SAACtC,GACNG,EAAyBH,EAAOJ,WWjBjC,IAEH,OAAKsB,EAQH,yBAAKqE,UAAU,OACb,kBAACmD,GAAD,MACA,kBAACoC,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAAClH,EAAA,EAAD,CAAYmH,KAAK,QAAQlH,MAAM,UAAUmH,aAAW,QAClD,kBAACC,EAAA,EAAD,OAEF,kBAACC,EAAA,EAAD,CAAY/H,QAAQ,MAApB,YAGC5C,GACC,kBAACsG,EAAA,EAAD,CAAQhD,MAAM,UAAUC,QAAS6G,GAAjC,YAEQ,YAAX3K,GAAwB,kBAACmL,EAAA,EAAD,OAE3B,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACd,kBAAC,KAAD,KACE,kBAAC,KAAD,CAAOC,KAAK,SAASC,QAAS,kBAAC,GAAD,QAC9B,kBAAC,KAAD,CAAOD,KAAM,IAAKC,QAAS,kBAAC,GAAD,CAAe9F,KAAMA,MAChD,kBAAC,KAAD,CAAO6F,KAAK,OAAOC,QAAS,qDAC5B,kBAAC,KAAD,CAAOD,KAAK,IAAIC,QAAS,kBAAC,KAAD,CAAUlD,GAAG,cA3BrC,yBACL1B,MAAO,CAACkE,SAAU,QAASW,IAAK,MAAOC,UAAW,SAAUC,MAAO,SACnE,kBAACC,EAAA,EAAD,Q,kBClCAC,GAAcC,aAAgB,CAClCtK,MTe0B,WAAgF,IAA/Eb,EAA8E,uDAAtDJ,EAAcK,EAAwC,uCACzG,OAAQA,EAAOuB,MACb,IAAK,cACH,OAAO,2BACFxB,GADL,kBAEGC,EAAOxB,WAAauB,EAAMC,EAAOxB,YAAYoH,QAAO,SAAA9E,GAAC,OAAIA,EAAEzC,IAAM2B,EAAOvB,YAE7E,IAAK,WACH,OAAO,2BACFsB,GADL,kBAEGC,EAAOW,KAAKwK,WAFf,CAE6BnL,EAAOW,MAFpC,mBAE6CZ,EAAMC,EAAOW,KAAKwK,gBAEjE,IAAK,cACH,OAAO,2BACFpL,GADL,kBAEGC,EAAOxB,WAAauB,EAAMC,EAAOxB,YAC/BuH,KAAI,SAAAjF,GAAC,OAAIA,EAAEzC,KAAO2B,EAAOvB,OAAhB,2BAA6BqC,GAAMd,EAAOrB,OAASmC,OAEnE,IAAK,eACH,OAAO,2BAAIf,GAAX,kBAAmBC,EAAOkF,SAAS7G,GAAK,KAC1C,IAAK,kBACH,IAAM+M,EAAS,eAAOrL,GAEtB,cADOqL,EAAUpL,EAAO3B,IACjB+M,EACT,IAAK,gBACH,IAAMA,EAAS,eAAOrL,GAItB,OAHAC,EAAOoG,UAAUiF,SAAQ,SAAA9D,GACvB6D,EAAU7D,EAAGlJ,IAAM,MAEd+M,EAET,IAAK,YACH,OAAO,2BAAIrL,GAAX,kBAAmBC,EAAOxB,WAAawB,EAAOY,QAChD,QACE,OAAOb,IShDXqG,UVA8B,WAAsG,IAArGrG,EAAoG,uDAAjEJ,EAAcK,EAAmD,uCACnI,OAAQA,EAAOuB,MACb,IAAK,kBACH,OAAOxB,EAAM6F,QAAO,SAAA2B,GAAE,OAAIA,EAAGlJ,IAAM2B,EAAO3B,MAC5C,IAAK,eACH,MAAM,CAAN,2BAAY2B,EAAOkF,UAAnB,IAA6BU,OAAQ,MAAOE,aAAc,UAA1D,mBAAsE/F,IAExE,IAAK,wBACH,OAAOA,EAAMgG,KAAI,SAAAwB,GAAE,OAAIA,EAAGlJ,KAAO2B,EAAO3B,GAAjB,2BAA0BkJ,GAA1B,IAA8BpJ,MAAO6B,EAAO7B,QAASoJ,KAC9E,IAAK,yBACH,OAAOxH,EAAMgG,KAAI,SAAAwB,GAAE,OAAIA,EAAGlJ,KAAO2B,EAAO3B,GAAjB,2BAClBkJ,GADkB,IAErB3B,OAAQ5F,EAAO4F,SACb2B,KACN,IAAK,gCACH,OAAOxH,EAAMgG,KAAI,SAAAwB,GAAE,OAAIA,EAAGlJ,KAAO2B,EAAO3B,GAAjB,2BAClBkJ,GADkB,IAErBzB,aAAc9F,EAAOX,SACnBkI,KACN,IAAK,gBACH,OAAOvH,EAAOoG,UAAUL,KAAI,SAAAwB,GAAE,kCACzBA,GADyB,IAE5B3B,OAAQ,MACRE,aAAc,YAElB,QACE,OAAO/F,IUzBX+H,IAAKvH,EACL+F,KAAMpG,IAGKoL,GAAQC,YAAe,CAClCpL,QAAS8K,GACTO,WAAY,SAACC,GAAD,OACVA,IAAuBC,QAAQC,SAOnCtO,OAAOiO,MAAQA,G,aClBfM,IAASC,OACP,kBAAC,KAAD,KACE,kBAAC,IAAD,CAAUP,MAAOA,IACf,kBAAC,GAAD,QAGFQ,SAASC,eAAe,ShB4HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9K,MAAK,SAAA+K,GACJA,EAAaC,gBAEd3K,OAAM,SAAAtC,GACLuC,QAAQvC,MAAMA,EAAMI,c","file":"static/js/main.2ba97bff.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '6d28cae1-0bac-4f22-abce-7f5967410738'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        const promise = instance.post<ResponseType<{userId?: number}>>('auth/login', data);\r\n        return promise;\r\n    },\r\n    logout() {\r\n        const promise = instance.delete<ResponseType<{userId?: number}>>('auth/login');\r\n        return promise;\r\n    },\r\n    me() {\r\n       const promise =  instance.get<ResponseType<{id: number; email: string; login: string}>>('auth/me');\r\n       return promise\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import {\r\n  setAppErrorAC,\r\n  SetAppErrorActionType,\r\n  setAppStatusAC,\r\n  SetAppStatusActionType\r\n} from 'app/app-reducer'\r\nimport {ResponseType} from 'api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n  if (data.messages.length) {\r\n    dispatch(setAppErrorAC({error: data.messages[0]}))\r\n  } else {\r\n    dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n  }\r\n  dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n  dispatch(setAppErrorAC({error: error.message ? error.message : 'Some error occurred'}))\r\n  dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {setAppStatusAC} from 'app/app-reducer'\r\nimport {authAPI, LoginParamsType} from 'api/todolists-api'\r\nimport {\r\n  handleServerAppError,\r\n  handleServerNetworkError\r\n} from 'utils/error-utils'\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n  isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n  name: 'Auth',\r\n  initialState: initialState,\r\n  reducers: {\r\n    setIsLoggedInAC(state, action: PayloadAction<{ isLoggedIn: boolean }>) {\r\n      state.isLoggedIn = action.payload.isLoggedIn\r\n    }\r\n  }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\n\r\nexport const {setIsLoggedInAC} = slice.actions\r\n\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n  dispatch(setAppStatusAC({status: \"loading\"}))\r\n  authAPI.login(data)\r\n    .then(res => {\r\n      if (res.data.resultCode === 0) {\r\n        dispatch(setIsLoggedInAC({isLoggedIn: true}))\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n      } else {\r\n        handleServerAppError(res.data, dispatch)\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n  dispatch(setAppStatusAC({status: 'loading'}))\r\n  authAPI.logout()\r\n    .then(res => {\r\n      if (res.data.resultCode === 0) {\r\n        dispatch(setIsLoggedInAC({isLoggedIn: false}))\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n      } else {\r\n        handleServerAppError(res.data, dispatch)\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {authAPI} from 'api/todolists-api'\r\nimport {setIsLoggedInAC} from 'features/Login/auth-reducer'\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: InitialStateType = {\r\n  status: 'idle',\r\n  error: null,\r\n  isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n  name: 'App',\r\n  initialState: initialState,\r\n  reducers: {\r\n    setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n      state.status = action.payload.status\r\n    },\r\n    setAppInitializedAC(state, action: PayloadAction<{ isInitialized: boolean }>) {\r\n      state.isInitialized = action.payload.isInitialized\r\n    },\r\n    setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n      state.error = action.payload.error\r\n    }\r\n  }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\nexport const {setAppStatusAC, setAppInitializedAC, setAppErrorAC} = slice.actions\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n  // происходит ли сейчас взаимодействие с сервером\r\n  status: RequestStatusType\r\n  // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n  error: string | null\r\n  // true когда приложение проинициализировалось (проверили юзера, настройки получили и т.д.)\r\n  isInitialized: boolean\r\n}\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n  authAPI.me().then(res => {\r\n    if (res.data.resultCode === 0) {\r\n      dispatch(setIsLoggedInAC({isLoggedIn: true}));\r\n    } else {\r\n\r\n    }\r\n    dispatch(setAppInitializedAC({isInitialized: true}));\r\n  })\r\n}\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n","import {todolistsAPI, TodolistType} from 'api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {\r\n  RequestStatusType,\r\n  SetAppErrorActionType,\r\n  setAppStatusAC,\r\n  SetAppStatusActionType\r\n} from 'app/app-reducer'\r\nimport {handleServerNetworkError} from 'utils/error-utils'\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n  switch (action.type) {\r\n    case 'REMOVE-TODOLIST':\r\n      return state.filter(tl => tl.id != action.id)\r\n    case 'ADD-TODOLIST':\r\n      return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n    case 'CHANGE-TODOLIST-TITLE':\r\n      return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n    case 'CHANGE-TODOLIST-FILTER':\r\n      return state.map(tl => tl.id === action.id ? {\r\n        ...tl,\r\n        filter: action.filter\r\n      } : tl)\r\n    case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n      return state.map(tl => tl.id === action.id ? {\r\n        ...tl,\r\n        entityStatus: action.status\r\n      } : tl)\r\n    case 'SET-TODOLISTS':\r\n      return action.todolists.map(tl => ({\r\n        ...tl,\r\n        filter: 'all',\r\n        entityStatus: 'idle'\r\n      }))\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({\r\n  type: 'REMOVE-TODOLIST',\r\n  id\r\n} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({\r\n  type: 'ADD-TODOLIST',\r\n  todolist\r\n} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n  type: 'CHANGE-TODOLIST-TITLE',\r\n  id,\r\n  title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n  type: 'CHANGE-TODOLIST-FILTER',\r\n  id,\r\n  filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n  type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({\r\n  type: 'SET-TODOLISTS',\r\n  todolists\r\n} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n  return (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.getTodolists()\r\n      .then((res) => {\r\n        dispatch(setTodolistsAC(res.data))\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n      })\r\n      .catch(error => {\r\n        handleServerNetworkError(error, dispatch);\r\n      })\r\n  }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n  return (dispatch: ThunkDispatch) => {\r\n    //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n    todolistsAPI.deleteTodolist(todolistId)\r\n      .then((res) => {\r\n        dispatch(removeTodolistAC(todolistId))\r\n        //скажем глобально приложению, что асинхронная операция завершена\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n      })\r\n  }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n  return (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.createTodolist(title)\r\n      .then((res) => {\r\n        dispatch(addTodolistAC(res.data.data.item))\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n      })\r\n  }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n  return (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.updateTodolist(id, title)\r\n      .then((res) => {\r\n        dispatch(changeTodolistTitleAC(id, title))\r\n      })\r\n  }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n  | RemoveTodolistActionType\r\n  | AddTodolistActionType\r\n  | ReturnType<typeof changeTodolistTitleAC>\r\n  | ReturnType<typeof changeTodolistFilterAC>\r\n  | SetTodolistsActionType\r\n  | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n  filter: FilterValuesType\r\n  entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import {\r\n  AddTodolistActionType,\r\n  RemoveTodolistActionType,\r\n  SetTodolistsActionType\r\n} from './todolists-reducer'\r\nimport {\r\n  TaskPriorities,\r\n  TaskStatuses,\r\n  TaskType,\r\n  todolistsAPI,\r\n  UpdateTaskModelType\r\n} from 'api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from 'app/store'\r\nimport {\r\n  SetAppErrorActionType,\r\n  setAppStatusAC,\r\n  SetAppStatusActionType\r\n} from 'app/app-reducer'\r\nimport {\r\n  handleServerAppError,\r\n  handleServerNetworkError\r\n} from 'utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n  switch (action.type) {\r\n    case 'REMOVE-TASK':\r\n      return {\r\n        ...state,\r\n        [action.todolistId]: state[action.todolistId].filter(t => t.id != action.taskId)\r\n      }\r\n    case 'ADD-TASK':\r\n      return {\r\n        ...state,\r\n        [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]\r\n      }\r\n    case 'UPDATE-TASK':\r\n      return {\r\n        ...state,\r\n        [action.todolistId]: state[action.todolistId]\r\n          .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n      }\r\n    case 'ADD-TODOLIST':\r\n      return {...state, [action.todolist.id]: []}\r\n    case 'REMOVE-TODOLIST':\r\n      const copyState = {...state}\r\n      delete copyState[action.id]\r\n      return copyState\r\n    case 'SET-TODOLISTS': {\r\n      const copyState = {...state}\r\n      action.todolists.forEach(tl => {\r\n        copyState[tl.id] = []\r\n      })\r\n      return copyState\r\n    }\r\n    case 'SET-TASKS':\r\n      return {...state, [action.todolistId]: action.tasks}\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n  ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n  ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n  ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n  ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n  dispatch(setAppStatusAC({status: 'loading'}))\r\n  todolistsAPI.getTasks(todolistId)\r\n    .then((res) => {\r\n      const tasks = res.data.items\r\n      dispatch(setTasksAC(tasks, todolistId))\r\n      dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n  todolistsAPI.deleteTask(todolistId, taskId)\r\n    .then(res => {\r\n      const action = removeTaskAC(taskId, todolistId)\r\n      dispatch(action)\r\n    })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n  dispatch(setAppStatusAC({status: 'loading'}))\r\n  todolistsAPI.createTask(todolistId, title)\r\n    .then(res => {\r\n      if (res.data.resultCode === 0) {\r\n        const task = res.data.data.item\r\n        const action = addTaskAC(task)\r\n        dispatch(action)\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n      } else {\r\n        handleServerAppError(res.data, dispatch);\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n  (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n    const state = getState()\r\n    const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n    if (!task) {\r\n      //throw new Error(\"task not found in the state\");\r\n      console.warn('task not found in the state')\r\n      return\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n      deadline: task.deadline,\r\n      description: task.description,\r\n      priority: task.priority,\r\n      startDate: task.startDate,\r\n      title: task.title,\r\n      status: task.status,\r\n      ...domainModel\r\n    }\r\n\r\n    todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n      .then(res => {\r\n        if (res.data.resultCode === 0) {\r\n          const action = updateTaskAC(taskId, domainModel, todolistId)\r\n          dispatch(action)\r\n        } else {\r\n          handleServerAppError(res.data, dispatch);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        handleServerNetworkError(error, dispatch);\r\n      })\r\n  }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n  title?: string\r\n  description?: string\r\n  status?: TaskStatuses\r\n  priority?: TaskPriorities\r\n  startDate?: string\r\n  deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n  [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n  | ReturnType<typeof removeTaskAC>\r\n  | ReturnType<typeof addTaskAC>\r\n  | ReturnType<typeof updateTaskAC>\r\n  | AddTodolistActionType\r\n  | RemoveTodolistActionType\r\n  | SetTodolistsActionType\r\n  | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from 'app/store'\r\nimport {\r\n  addTodolistTC,\r\n  changeTodolistFilterAC,\r\n  changeTodolistTitleTC,\r\n  fetchTodolistsTC,\r\n  FilterValuesType,\r\n  removeTodolistTC,\r\n  TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from 'api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from 'components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Navigate} from 'react-router-dom'\r\n\r\ntype PropsType = {\r\n  demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n  const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n  const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    if (demo || !isLoggedIn) {\r\n      return;\r\n    }\r\n    const thunk = fetchTodolistsTC()\r\n    dispatch(thunk)\r\n  }, [])\r\n\r\n  const removeTask = useCallback(function (id: string, todolistId: string) {\r\n    const thunk = removeTaskTC(id, todolistId)\r\n    dispatch(thunk)\r\n  }, [])\r\n\r\n  const addTask = useCallback(function (title: string, todolistId: string) {\r\n    const thunk = addTaskTC(title, todolistId)\r\n    dispatch(thunk)\r\n  }, [])\r\n\r\n  const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n    const thunk = updateTaskTC(id, {status}, todolistId)\r\n    dispatch(thunk)\r\n  }, [])\r\n\r\n  const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n    const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n    dispatch(thunk)\r\n  }, [])\r\n\r\n  const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n    const action = changeTodolistFilterAC(todolistId, value)\r\n    dispatch(action)\r\n  }, [])\r\n\r\n  const removeTodolist = useCallback(function (id: string) {\r\n    const thunk = removeTodolistTC(id)\r\n    dispatch(thunk)\r\n  }, [])\r\n\r\n  const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n    const thunk = changeTodolistTitleTC(id, title)\r\n    dispatch(thunk)\r\n  }, [])\r\n\r\n  const addTodolist = useCallback((title: string) => {\r\n    const thunk = addTodolistTC(title)\r\n    dispatch(thunk)\r\n  }, [dispatch])\r\n\r\n  if (!isLoggedIn) {\r\n    return <Navigate to=\"/login\"/>;\r\n  }\r\n\r\n  return <>\r\n    <Grid container style={{padding: '20px'}}>\r\n      <AddItemForm addItem={addTodolist}/>\r\n    </Grid>\r\n    <Grid container spacing={3}>\r\n      {\r\n        todolists.map(tl => {\r\n          let allTodolistTasks = tasks[tl.id]\r\n\r\n          return <Grid item key={tl.id}>\r\n            <Paper style={{padding: '10px'}}>\r\n              <Todolist\r\n                todolist={tl}\r\n                tasks={allTodolistTasks}\r\n                removeTask={removeTask}\r\n                changeFilter={changeFilter}\r\n                addTask={addTask}\r\n                changeTaskStatus={changeStatus}\r\n                removeTodolist={removeTodolist}\r\n                changeTaskTitle={changeTaskTitle}\r\n                changeTodolistTitle={changeTodolistTitle}\r\n                demo={demo}\r\n              />\r\n            </Paper>\r\n          </Grid>\r\n        })\r\n      }\r\n    </Grid>\r\n  </>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from 'app/store'\r\nimport {setAppErrorAC} from 'app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n  const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n  const dispatch = useDispatch()\r\n\r\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n    if (reason === 'clickaway') {\r\n      return\r\n    }\r\n    dispatch(setAppErrorAC({error: null}));\r\n  }\r\n\r\n\r\n  const isOpen = error !== null;\r\n\r\n  return (\r\n    <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n      <Alert onClose={handleClose} severity=\"error\">\r\n        {error}\r\n      </Alert>\r\n    </Snackbar>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from 'formik'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {loginTC} from './auth-reducer'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {Navigate} from 'react-router-dom'\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'Email is required'\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'Password is required'\r\n                }\r\n            }\r\n\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to=\"/\" />;\r\n    }\r\n\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>\r\n                            To log in get registered <a href={'https://social-network.samuraijs.com/'}\r\n                                                        target={'_blank'}>here</a>\r\n                        </p>\r\n                        <p>\r\n                            or use common test account credentials:\r\n                        </p>\r\n                        <p> Email: free@samuraijs.com\r\n                        </p>\r\n                        <p>\r\n                            Password: free\r\n                        </p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps(\"rememberMe\")}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n  AppBar,\r\n  Button,\r\n  CircularProgress,\r\n  Container,\r\n  IconButton,\r\n  LinearProgress,\r\n  Toolbar,\r\n  Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from 'features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from 'components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport {Navigate, Route, Routes} from 'react-router-dom'\r\nimport {Login} from 'features/Login/Login'\r\nimport {logoutTC} from 'features/Login/auth-reducer'\r\n\r\n\r\ntype PropsType = {\r\n  demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n  const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n  const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    dispatch(initializeAppTC())\r\n  }, [])\r\n\r\n  const logoutHandler = useCallback(() => {\r\n    dispatch(logoutTC())\r\n  }, [])\r\n\r\n  if (!isInitialized) {\r\n    return <div\r\n      style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n      <CircularProgress/>\r\n    </div>\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <ErrorSnackbar/>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n            <Menu/>\r\n          </IconButton>\r\n          <Typography variant=\"h6\">\r\n            Todolist\r\n          </Typography>\r\n          {isLoggedIn &&\r\n            <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n        </Toolbar>\r\n        {status === 'loading' && <LinearProgress/>}\r\n      </AppBar>\r\n      <Container fixed>\r\n        <Routes>\r\n          <Route path=\"/login\" element={<Login/>}/>\r\n          <Route path={'/'} element={<TodolistsList demo={demo}/>}/>\r\n          <Route path=\"/404\" element={<h1>404: PAGE NOT FOUND</h1>}/>\r\n          <Route path=\"*\" element={<Navigate to=\"/404\"/>}/>\r\n        </Routes>\r\n      </Container>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from '../features/Login/auth-reducer'\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n  tasks: tasksReducer,\r\n  todolists: todolistsReducer,\r\n  app: appReducer,\r\n  auth: authReducer\r\n})\r\n\r\nexport const store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './app/App';\r\nimport {store} from './app/store';\r\nimport {Provider} from 'react-redux';\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <HashRouter>\r\n    <Provider store={store}>\r\n      <App/>\r\n    </Provider>\r\n  </HashRouter>\r\n  , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}