{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","then","res","resultCode","action","updateTaskAC","catch","console","warn","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","key","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","todolist","items","setTasksAC","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","entityStatus","map","style","paddingTop","Button","TodolistsList","todolists","useSelector","state","auth","removeTaskAC","removeTaskTC","addTaskAC","item","addTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","errors","FormControlLabel","control","App","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","top","textAlign","width","CircularProgress","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7d84a1fa.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\n\nconst settings = {\n  withCredentials: true,\n  headers: {\n    'API-KEY': '6d28cae1-0bac-4f22-abce-7f5967410738'\n  }\n}\nconst instance = axios.create({\n  baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n  ...settings\n})\n\n// api\nexport const todolistsAPI = {\n  getTodolists() {\n    const promise = instance.get<TodolistType[]>('todo-lists');\n    return promise;\n  },\n  createTodolist(title: string) {\n    const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\n    return promise;\n  },\n  deleteTodolist(id: string) {\n    const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\n    return promise;\n  },\n  updateTodolist(id: string, title: string) {\n    const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\n    return promise;\n  },\n  getTasks(todolistId: string) {\n    return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\n  },\n  deleteTask(todolistId: string, taskId: string) {\n    return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\n  },\n  createTask(todolistId: string, taskTitile: string) {\n    return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\n  },\n  updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\n    return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\n  }\n}\n\n\nexport type LoginParamsType = {\n  email: string\n  password: string\n  rememberMe: boolean\n  captcha?: string\n}\n\nexport const authAPI = {\n  login(data: LoginParamsType) {\n    const promise = instance.post<ResponseType<{ userId?: number }>>('auth/login', data);\n    return promise;\n  },\n  logout() {\n    const promise = instance.delete<ResponseType<{ userId?: number }>>('auth/login');\n    return promise;\n  },\n  me() {\n    const promise = instance.get<ResponseType<{ id: number; email: string; login: string }>>('auth/me');\n    return promise\n  }\n}\n\n// types\nexport type TodolistType = {\n  id: string\n  title: string\n  addedDate: string\n  order: number\n}\nexport type ResponseType<D = {}> = {\n  resultCode: number\n  messages: Array<string>\n  data: D\n}\n\nexport enum TaskStatuses {\n  New = 0,\n  InProgress = 1,\n  Completed = 2,\n  Draft = 3\n}\n\nexport enum TaskPriorities {\n  Low = 0,\n  Middle = 1,\n  Hi = 2,\n  Urgently = 3,\n  Later = 4\n}\n\nexport type TaskType = {\n  description: string\n  title: string\n  status: TaskStatuses\n  priority: TaskPriorities\n  startDate: string\n  deadline: string\n  id: string\n  todoListId: string\n  order: number\n  addedDate: string\n}\nexport type UpdateTaskModelType = {\n  title: string\n  description: string\n  status: TaskStatuses\n  priority: TaskPriorities\n  startDate: string\n  deadline: string\n}\ntype GetTasksResponse = {\n  error: string | null\n  totalCount: number\n  items: TaskType[]\n}\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\nimport {ResponseType} from '../api/todolists-api'\nimport {Dispatch} from 'redux'\n\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\n    if (data.messages.length) {\n        dispatch(setAppErrorAC(data.messages[0]))\n    } else {\n        dispatch(setAppErrorAC('Some error occurred'))\n    }\n    dispatch(setAppStatusAC('failed'))\n}\n\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\n    dispatch(setAppStatusAC('failed'))\n}\n","import {Dispatch} from 'redux'\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\nimport {authAPI, LoginParamsType} from '../../api/todolists-api'\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\n\nconst initialState: InitialStateType = {\n    isLoggedIn: false\n}\n\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'login/SET-IS-LOGGED-IN':\n            return {...state, isLoggedIn: action.value}\n        default:\n            return state\n    }\n}\n\n// actions\n\nexport const setIsLoggedInAC = (value: boolean) =>\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\n\n\n// thunks\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>) => {\n    dispatch(setAppStatusAC('loading'))\n    authAPI.login(data)\n        .then(res => {\n            if (res.data.resultCode === 0) {\n                dispatch(setIsLoggedInAC(true))\n                dispatch(setAppStatusAC('succeeded'))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n}\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>) => {\n    dispatch(setAppStatusAC('loading'))\n    authAPI.logout()\n        .then(res => {\n            if (res.data.resultCode === 0) {\n                dispatch(setIsLoggedInAC(false))\n                dispatch(setAppStatusAC('succeeded'))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n}\n\n// types\n\ntype ActionsType = ReturnType<typeof setIsLoggedInAC>\ntype InitialStateType = {\n    isLoggedIn: boolean\n}\n\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\n","import {Dispatch} from 'redux'\nimport {authAPI} from '../api/todolists-api'\nimport {setIsLoggedInAC} from '../features/Login/auth-reducer'\n\nconst initialState: InitialStateType = {\n    status: 'idle',\n    error: null,\n    isInitialized: false\n}\n\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'APP/SET-STATUS':\n            return {...state, status: action.status}\n        case 'APP/SET-ERROR':\n            return {...state, error: action.error}\n        case 'APP/SET-IS-INITIALIED':\n            return {...state, isInitialized: action.value}\n        default:\n            return {...state}\n    }\n}\n\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\nexport type InitialStateType = {\n    // происходит ли сейчас взаимодействие с сервером\n    status: RequestStatusType\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\n    error: string | null\n    // true когда приложение проинициализировалось (проверили юзера, настройки получили и т.д.)\n    isInitialized: boolean\n}\n\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\nexport const setAppInitializedAC = (value: boolean) => ({type: 'APP/SET-IS-INITIALIED', value} as const)\n\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\n    authAPI.me().then(res => {\n        if (res.data.resultCode === 0) {\n            dispatch(setIsLoggedInAC(true));\n        } else {\n\n        }\n\n        dispatch(setAppInitializedAC(true));\n    })\n}\n\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\n\n\ntype ActionsType =\n    | SetAppErrorActionType\n    | SetAppStatusActionType\n    | ReturnType<typeof setAppInitializedAC>\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\nimport {Dispatch} from 'redux'\nimport {RequestStatusType, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\nimport {handleServerNetworkError} from '../../utils/error-utils'\n\nconst initialState: Array<TodolistDomainType> = []\n\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\n    switch (action.type) {\n        case 'REMOVE-TODOLIST':\n            return state.filter(tl => tl.id != action.id)\n        case 'ADD-TODOLIST':\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\n\n        case 'CHANGE-TODOLIST-TITLE':\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\n        case 'CHANGE-TODOLIST-FILTER':\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\n        case 'SET-TODOLISTS':\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\n        default:\n            return state\n    }\n}\n\n// actions\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\n    type: 'CHANGE-TODOLIST-TITLE',\n    id,\n    title\n} as const)\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\n    type: 'CHANGE-TODOLIST-FILTER',\n    id,\n    filter\n} as const)\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status } as const)\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\n\n// thunks\nexport const fetchTodolistsTC = () => {\n    return (dispatch: ThunkDispatch) => {\n        dispatch(setAppStatusAC('loading'))\n        todolistsAPI.getTodolists()\n            .then((res) => {\n                dispatch(setTodolistsAC(res.data))\n                dispatch(setAppStatusAC('succeeded'))\n            })\n            .catch(error => {\n                handleServerNetworkError(error, dispatch);\n            })\n    }\n}\nexport const removeTodolistTC = (todolistId: string) => {\n    return (dispatch: ThunkDispatch) => {\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\n        dispatch(setAppStatusAC('loading'))\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\n        todolistsAPI.deleteTodolist(todolistId)\n            .then((res) => {\n                dispatch(removeTodolistAC(todolistId))\n                //скажем глобально приложению, что асинхронная операция завершена\n                dispatch(setAppStatusAC('succeeded'))\n            })\n    }\n}\nexport const addTodolistTC = (title: string) => {\n    return (dispatch: ThunkDispatch) => {\n        dispatch(setAppStatusAC('loading'))\n        todolistsAPI.createTodolist(title)\n            .then((res) => {\n                dispatch(addTodolistAC(res.data.data.item))\n                dispatch(setAppStatusAC('succeeded'))\n            })\n    }\n}\nexport const changeTodolistTitleTC = (id: string, title: string) => {\n    return (dispatch: Dispatch<ActionsType>) => {\n        todolistsAPI.updateTodolist(id, title)\n            .then((res) => {\n                dispatch(changeTodolistTitleAC(id, title))\n            })\n    }\n}\n\n// types\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\ntype ActionsType =\n    | RemoveTodolistActionType\n    | AddTodolistActionType\n    | ReturnType<typeof changeTodolistTitleAC>\n    | ReturnType<typeof changeTodolistFilterAC>\n    | SetTodolistsActionType\n    | ReturnType<typeof changeTodolistEntityStatusAC>\nexport type FilterValuesType = 'all' | 'active' | 'completed';\nexport type TodolistDomainType = TodolistType & {\n    filter: FilterValuesType\n    entityStatus: RequestStatusType\n}\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\n","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\nimport {Dispatch} from 'redux'\nimport {AppRootStateType} from '../../app/store'\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\n\nconst initialState: TasksStateType = {}\n\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\n    switch (action.type) {\n        case 'REMOVE-TASK':\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id != action.taskId)}\n        case 'ADD-TASK':\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\n        case 'UPDATE-TASK':\n            return {\n                ...state,\n                [action.todolistId]: state[action.todolistId]\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\n            }\n        case 'ADD-TODOLIST':\n            return {...state, [action.todolist.id]: []}\n        case 'REMOVE-TODOLIST':\n            const copyState = {...state}\n            delete copyState[action.id]\n            return copyState\n        case 'SET-TODOLISTS': {\n            const copyState = {...state}\n            action.todolists.forEach(tl => {\n                copyState[tl.id] = []\n            })\n            return copyState\n        }\n        case 'SET-TASKS':\n            return {...state, [action.todolistId]: action.tasks}\n        default:\n            return state\n    }\n}\n\n// actions\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\nexport const addTaskAC = (task: TaskType) =>\n    ({type: 'ADD-TASK', task} as const)\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\n\n// thunks\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\n    dispatch(setAppStatusAC('loading'))\n    todolistsAPI.getTasks(todolistId)\n        .then((res) => {\n            const tasks = res.data.items\n            dispatch(setTasksAC(tasks, todolistId))\n            dispatch(setAppStatusAC('succeeded'))\n        })\n}\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\n    todolistsAPI.deleteTask(todolistId, taskId)\n        .then(res => {\n            const action = removeTaskAC(taskId, todolistId)\n            dispatch(action)\n        })\n}\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\n    dispatch(setAppStatusAC('loading'))\n    todolistsAPI.createTask(todolistId, title)\n        .then(res => {\n            if (res.data.resultCode === 0) {\n                const task = res.data.data.item\n                const action = addTaskAC(task)\n                dispatch(action)\n                dispatch(setAppStatusAC('succeeded'))\n            } else {\n                handleServerAppError(res.data, dispatch);\n            }\n        })\n        .catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n}\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\n        const state = getState()\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\n        if (!task) {\n            //throw new Error(\"task not found in the state\");\n            console.warn('task not found in the state')\n            return\n        }\n\n        const apiModel: UpdateTaskModelType = {\n            deadline: task.deadline,\n            description: task.description,\n            priority: task.priority,\n            startDate: task.startDate,\n            title: task.title,\n            status: task.status,\n            ...domainModel\n        }\n\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\n            .then(res => {\n                if (res.data.resultCode === 0) {\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\n                    dispatch(action)\n                } else {\n                    handleServerAppError(res.data, dispatch);\n                }\n            })\n            .catch((error) => {\n                handleServerNetworkError(error, dispatch);\n            })\n    }\n\n// types\nexport type UpdateDomainTaskModelType = {\n    title?: string\n    description?: string\n    status?: TaskStatuses\n    priority?: TaskPriorities\n    startDate?: string\n    deadline?: string\n}\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}\ntype ActionsType =\n    | ReturnType<typeof removeTaskAC>\n    | ReturnType<typeof addTaskAC>\n    | ReturnType<typeof updateTaskAC>\n    | AddTodolistActionType\n    | RemoveTodolistActionType\n    | SetTodolistsActionType\n    | ReturnType<typeof setTasksAC>\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\nimport {AddBox} from '@material-ui/icons';\n\ntype AddItemFormPropsType = {\n    addItem: (title: string) => void\n    disabled?: boolean\n}\n\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\n    console.log(\"AddItemForm called\")\n\n    let [title, setTitle] = useState(\"\")\n    let [error, setError] = useState<string | null>(null)\n\n    const addItemHandler = () => {\n        if (title.trim() !== \"\") {\n            addItem(title);\n            setTitle(\"\");\n        } else {\n            setError(\"Title is required\");\n        }\n    }\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (error !== null) {\n            setError(null);\n        }\n        if (e.charCode === 13) {\n            addItemHandler();\n        }\n    }\n\n    return <div>\n        <TextField variant=\"outlined\"\n                   disabled={disabled}\n                   error={!!error}\n                   value={title}\n                   onChange={onChangeHandler}\n                   onKeyPress={onKeyPressHandler}\n                   label=\"Title\"\n                   helperText={error}\n        />\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\n            <AddBox />\n        </IconButton>\n    </div>\n})\n","import React, {ChangeEvent, useState} from 'react';\nimport {TextField} from '@material-ui/core';\n\ntype EditableSpanPropsType = {\n    value: string\n    onChange: (newValue: string) => void\n}\n\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\n    console.log(\"EditableSpan called\");\n    let [editMode, setEditMode] = useState(false);\n    let [title, setTitle] = useState(props.value);\n\n    const activateEditMode = () => {\n        setEditMode(true);\n        setTitle(props.value);\n    }\n    const activateViewMode = () => {\n        setEditMode(false);\n        props.onChange(title);\n    }\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    return editMode\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\n});\n","import React, {ChangeEvent, useCallback} from 'react'\nimport {Checkbox, IconButton} from '@material-ui/core'\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\nimport {Delete} from '@material-ui/icons'\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\n\ntype TaskPropsType = {\n    task: TaskType\n    todolistId: string\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\n    removeTask: (taskId: string, todolistId: string) => void\n}\nexport const Task = React.memo((props: TaskPropsType) => {\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\n\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        let newIsDoneValue = e.currentTarget.checked\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\n    }, [props.task.id, props.todolistId]);\n\n    const onTitleChangeHandler = useCallback((newValue: string) => {\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\n    }, [props.task.id, props.todolistId]);\n\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\n        <Checkbox\n            checked={props.task.status === TaskStatuses.Completed}\n            color=\"primary\"\n            onChange={onChangeHandler}\n        />\n\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\n        <IconButton onClick={onClickHandler}>\n            <Delete/>\n        </IconButton>\n    </div>\n})\n","import React, {useCallback, useEffect} from 'react'\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\nimport {Button, IconButton} from '@material-ui/core'\nimport {Delete} from '@material-ui/icons'\nimport {Task} from './Task/Task'\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\nimport {useDispatch} from 'react-redux'\nimport {fetchTasksTC} from '../tasks-reducer'\n\ntype PropsType = {\n    todolist: TodolistDomainType\n    tasks: Array<TaskType>\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\n    addTask: (title: string, todolistId: string) => void\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\n    removeTask: (taskId: string, todolistId: string) => void\n    removeTodolist: (id: string) => void\n    changeTodolistTitle: (id: string, newTitle: string) => void\n    demo?: boolean\n}\n\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\n    console.log('Todolist called')\n\n    const dispatch = useDispatch()\n    useEffect(() => {\n        if (demo) {\n            return\n        }\n        const thunk = fetchTasksTC(props.todolist.id)\n        dispatch(thunk)\n    }, [])\n\n    const addTask = useCallback((title: string) => {\n        props.addTask(title, props.todolist.id)\n    }, [props.addTask, props.todolist.id])\n\n    const removeTodolist = () => {\n        props.removeTodolist(props.todolist.id)\n    }\n    const changeTodolistTitle = useCallback((title: string) => {\n        props.changeTodolistTitle(props.todolist.id, title)\n    }, [props.todolist.id, props.changeTodolistTitle])\n\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\n\n\n    let tasksForTodolist = props.tasks\n\n    if (props.todolist.filter === 'active') {\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\n    }\n    if (props.todolist.filter === 'completed') {\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\n    }\n\n    return <div>\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\n                <Delete/>\n            </IconButton>\n        </h3>\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\n        <div>\n            {\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\n                                                removeTask={props.removeTask}\n                                                changeTaskTitle={props.changeTaskTitle}\n                                                changeTaskStatus={props.changeTaskStatus}\n                />)\n            }\n        </div>\n        <div style={{paddingTop: '10px'}}>\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\n                    onClick={onAllClickHandler}\n                    color={'default'}\n            >All\n            </Button>\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\n                    onClick={onActiveClickHandler}\n                    color={'primary'}>Active\n            </Button>\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\n                    onClick={onCompletedClickHandler}\n                    color={'secondary'}>Completed\n            </Button>\n        </div>\n    </div>\n})\n\n\n","import React, {useCallback, useEffect} from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {AppRootStateType} from '../../app/store'\nimport {\n    addTodolistTC,\n    changeTodolistFilterAC,\n    changeTodolistTitleTC,\n    fetchTodolistsTC,\n    FilterValuesType,\n    removeTodolistTC,\n    TodolistDomainType\n} from './todolists-reducer'\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\nimport {TaskStatuses} from '../../api/todolists-api'\nimport {Grid, Paper} from '@material-ui/core'\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\nimport {Todolist} from './Todolist/Todolist'\nimport { Redirect } from 'react-router-dom'\n\ntype PropsType = {\n    demo?: boolean\n}\n\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        if (demo || !isLoggedIn) {\n            return;\n        }\n        const thunk = fetchTodolistsTC()\n        dispatch(thunk)\n    }, [])\n\n    const removeTask = useCallback(function (id: string, todolistId: string) {\n        const thunk = removeTaskTC(id, todolistId)\n        dispatch(thunk)\n    }, [])\n\n    const addTask = useCallback(function (title: string, todolistId: string) {\n        const thunk = addTaskTC(title, todolistId)\n        dispatch(thunk)\n    }, [])\n\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\n        const thunk = updateTaskTC(id, {status}, todolistId)\n        dispatch(thunk)\n    }, [])\n\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\n        dispatch(thunk)\n    }, [])\n\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\n        const action = changeTodolistFilterAC(todolistId, value)\n        dispatch(action)\n    }, [])\n\n    const removeTodolist = useCallback(function (id: string) {\n        const thunk = removeTodolistTC(id)\n        dispatch(thunk)\n    }, [])\n\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\n        const thunk = changeTodolistTitleTC(id, title)\n        dispatch(thunk)\n    }, [])\n\n    const addTodolist = useCallback((title: string) => {\n        const thunk = addTodolistTC(title)\n        dispatch(thunk)\n    }, [dispatch])\n\n    if (!isLoggedIn) {\n        return <Redirect to={\"/login\"} />\n    }\n\n    return <>\n        <Grid container style={{padding: '20px'}}>\n            <AddItemForm addItem={addTodolist}/>\n        </Grid>\n        <Grid container spacing={3}>\n            {\n                todolists.map(tl => {\n                    let allTodolistTasks = tasks[tl.id]\n\n                    return <Grid item key={tl.id}>\n                        <Paper style={{padding: '10px'}}>\n                            <Todolist\n                                todolist={tl}\n                                tasks={allTodolistTasks}\n                                removeTask={removeTask}\n                                changeFilter={changeFilter}\n                                addTask={addTask}\n                                changeTaskStatus={changeStatus}\n                                removeTodolist={removeTodolist}\n                                changeTaskTitle={changeTaskTitle}\n                                changeTodolistTitle={changeTodolistTitle}\n                                demo={demo}\n                            />\n                        </Paper>\n                    </Grid>\n                })\n            }\n        </Grid>\n    </>\n}\n","import React from 'react'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {AppRootStateType} from '../../app/store'\nimport {setAppErrorAC} from '../../app/app-reducer'\n\nfunction Alert(props: AlertProps) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\n}\n\nexport function ErrorSnackbar() {\n    //const [open, setOpen] = React.useState(true)\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\n    const dispatch = useDispatch()\n\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return\n        }\n        dispatch(setAppErrorAC(null));\n    }\n\n\n    const isOpen = error !== null;\n\n    return (\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\n            <Alert onClose={handleClose} severity=\"error\">\n                {error}\n            </Alert>\n        </Snackbar>\n    )\n}\n","import React from 'react'\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\nimport {useFormik} from 'formik'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {loginTC} from './auth-reducer'\nimport {AppRootStateType} from '../../app/store'\nimport { Redirect } from 'react-router-dom'\n\nexport const Login = () => {\n    const dispatch = useDispatch()\n\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\n\n    const formik = useFormik({\n        validate: (values) => {\n            if (!values.email) {\n                return {\n                    email: 'Email is required'\n                }\n            }\n            if (!values.password) {\n                return {\n                    password: 'Password is required'\n                }\n            }\n\n        },\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false\n        },\n        onSubmit: values => {\n            dispatch(loginTC(values));\n        },\n    })\n\n    if (isLoggedIn) {\n        return <Redirect to={\"/\"} />\n    }\n\n\n    return <Grid container justify=\"center\">\n        <Grid item xs={4}>\n            <form onSubmit={formik.handleSubmit}>\n                <FormControl>\n                    <FormLabel>\n                        <p>\n                            To log in get registered <a href={'https://social-network.samuraijs.com/'}\n                                                        target={'_blank'}>here</a>\n                        </p>\n                        <p>\n                            or use common test account credentials:\n                        </p>\n                        <p> Email: free@samuraijs.com\n                        </p>\n                        <p>\n                            Password: free\n                        </p>\n                    </FormLabel>\n                    <FormGroup>\n                        <TextField\n                            label=\"Email\"\n                            margin=\"normal\"\n                            {...formik.getFieldProps(\"email\")}\n                        />\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\n                        <TextField\n                            type=\"password\"\n                            label=\"Password\"\n                            margin=\"normal\"\n                            {...formik.getFieldProps(\"password\")}\n                        />\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\n                        <FormControlLabel\n                            label={'Remember me'}\n                            control={<Checkbox\n                                {...formik.getFieldProps(\"rememberMe\")}\n                                checked={formik.values.rememberMe}\n                            />}\n                        />\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\n                    </FormGroup>\n                </FormControl>\n            </form>\n        </Grid>\n    </Grid>\n}\n","import React, {useCallback, useEffect} from 'react'\nimport './App.css'\nimport {\n    AppBar,\n    Button,\n    CircularProgress,\n    Container,\n    IconButton,\n    LinearProgress,\n    Toolbar,\n    Typography\n} from '@material-ui/core'\nimport {Menu} from '@material-ui/icons'\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {AppRootStateType} from './store'\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\nimport {BrowserRouter, Route} from 'react-router-dom'\nimport {Login} from '../features/Login/Login'\nimport {logoutTC} from '../features/Login/auth-reducer'\n\ntype PropsType = {\n    demo?: boolean\n}\n\nfunction App({demo = false}: PropsType) {\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(initializeAppTC())\n    }, [])\n\n    const logoutHandler = useCallback(() => {\n        dispatch(logoutTC())\n    }, [])\n\n    if (!isInitialized) {\n        return <div\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\n            <CircularProgress/>\n        </div>\n    }\n\n    return (\n        <BrowserRouter>\n            <div className=\"App\">\n                <ErrorSnackbar/>\n                <AppBar position=\"static\">\n                    <Toolbar>\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                            <Menu/>\n                        </IconButton>\n                        <Typography variant=\"h6\">\n                            News\n                        </Typography>\n                        {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\n                    </Toolbar>\n                    {status === 'loading' && <LinearProgress/>}\n                </AppBar>\n                <Container fixed>\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\n                    <Route path={'/login'} render={() => <Login/>}/>\n                </Container>\n            </div>\n        </BrowserRouter>\n    )\n}\n\nexport default App\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport {appReducer} from './app-reducer'\nimport {authReducer} from '../features/Login/auth-reducer'\n\n// объединяя reducer-ы с помощью combineReducers,\n// мы задаём структуру нашего единственного объекта-состояния\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todolistsReducer,\n    app: appReducer,\n    auth: authReducer\n})\n// непосредственно создаём store\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './app/App';\nimport {store} from './app/store';\nimport {Provider} from 'react-redux';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}